"""
This type stub file was generated by pyright.
"""

"""Python client for InfluxDB v0.8."""
session = ...
class InfluxDBClientError(Exception):
    """Raised when an error occurs in the request."""
    def __init__(self, content, code=...) -> None:
        """Initialize an InfluxDBClientError handler."""
        ...



class InfluxDBClient:
    """Define the standard InfluxDBClient for influxdb v0.8.

    The ``InfluxDBClient`` object holds information necessary to connect
    to InfluxDB. Requests can be made to InfluxDB directly through the client.

    :param host: hostname to connect to InfluxDB, defaults to 'localhost'
    :type host: string
    :param port: port to connect to InfluxDB, defaults to 'localhost'
    :type port: int
    :param username: user to connect, defaults to 'root'
    :type username: string
    :param password: password of the user, defaults to 'root'
    :type password: string
    :param database: database name to connect to, defaults is None
    :type database: string
    :param ssl: use https instead of http to connect to InfluxDB, defaults is
        False
    :type ssl: boolean
    :param verify_ssl: verify SSL certificates for HTTPS requests, defaults is
        False
    :type verify_ssl: boolean
    :param retries: number of retries your client will try before aborting,
        defaults to 3. 0 indicates try until success
    :type retries: int
    :param timeout: number of seconds Requests will wait for your client to
        establish a connection, defaults to None
    :type timeout: int
    :param use_udp: use UDP to connect to InfluxDB, defaults is False
    :type use_udp: int
    :param udp_port: UDP port to connect to InfluxDB, defaults is 4444
    :type udp_port: int
    """
    def __init__(self, host=..., port=..., username=..., password=..., database=..., ssl=..., verify_ssl=..., timeout=..., retries=..., use_udp=..., udp_port=...) -> None:
        """Construct a new InfluxDBClient object."""
        ...

    @staticmethod
    def from_dsn(dsn, **kwargs): # -> InfluxDBClient:
        r"""Return an instaance of InfluxDBClient from given data source name.

        Returns an instance of InfluxDBClient from the provided data source
        name. Supported schemes are "influxdb", "https+influxdb",
        "udp+influxdb". Parameters for the InfluxDBClient constructor may be
        also be passed to this function.

        Examples:
            >> cli = InfluxDBClient.from_dsn('influxdb://username:password@\
            ... localhost:8086/databasename', timeout=5)
            >> type(cli)
            <class 'influxdb.client.InfluxDBClient'>
            >> cli = InfluxDBClient.from_dsn('udp+influxdb://username:pass@\
            ... localhost:8086/databasename', timeout=5, udp_port=159)
            >> print('{0._baseurl} - {0.use_udp} {0.udp_port}'.format(cli))
            http://localhost:8086 - True 159

        :param dsn: data source name
        :type dsn: string
        :param **kwargs: additional parameters for InfluxDBClient.
        :type **kwargs: dict
        :note: parameters provided in **kwargs may override dsn parameters.
        :note: when using "udp+influxdb" the specified port (if any) will be
        used for the TCP connection; specify the udp port with the additional
        udp_port parameter (cf. examples).
        :raise ValueError: if the provided DSN has any unexpected value.

        """
        ...

    def switch_database(self, database): # -> None:
        """Change client database.

        :param database: the new database name to switch to
        :type database: string
        """
        ...

    def switch_db(self, database): # -> None:
        """Change client database.

        DEPRECATED.
        """
        ...

    def switch_user(self, username, password): # -> None:
        """Change client username.

        :param username: the new username to switch to
        :type username: string
        :param password: the new password to switch to
        :type password: string
        """
        ...

    def request(self, url, method=..., params=..., data=..., expected_response_code=...): # -> Response:
        """Make a http request to API."""
        ...

    def write(self, data): # -> Literal[True]:
        """Provide as convenience for influxdb v0.9.0, this may change."""
        ...

    def write_points(self, data, time_precision=..., *args, **kwargs): # -> Literal[True]:
        """Write to multiple time series names.

        An example data blob is:

        data = [
            {
                "points": [
                    [
                        12
                    ]
                ],
                "name": "cpu_load_short",
                "columns": [
                    "value"
                ]
            }
        ]

        :param data: A list of dicts in InfluxDB 0.8.x data format.
        :param time_precision: [Optional, default 's'] Either 's', 'm', 'ms'
            or 'u'.
        :param batch_size: [Optional] Value to write the points in batches
            instead of all at one time. Useful for when doing data dumps from
            one database to another or when doing a massive write operation
        :type batch_size: int

        """
        ...

    def write_points_with_precision(self, data, time_precision=...): # -> Literal[True]:
        """Write to multiple time series names.

        DEPRECATED.
        """
        ...

    def delete_points(self, name): # -> Literal[True]:
        """Delete an entire series."""
        ...

    def create_scheduled_delete(self, json_body):
        """Create schedule delete from database.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def get_list_scheduled_delete(self):
        """Get list of scheduled deletes.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def remove_scheduled_delete(self, delete_id):
        """Remove scheduled delete.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def query(self, query, time_precision=..., chunked=...): # -> list[Any] | Any:
        """Query data from the influxdb v0.8 database.

        :param time_precision: [Optional, default 's'] Either 's', 'm', 'ms'
            or 'u'.
        :param chunked: [Optional, default=False] True if the data shall be
            retrieved in chunks, False otherwise.
        """
        ...

    def create_database(self, database): # -> Literal[True]:
        """Create a database on the InfluxDB server.

        :param database: the name of the database to create
        :type database: string
        :rtype: boolean
        """
        ...

    def delete_database(self, database): # -> Literal[True]:
        """Drop a database on the InfluxDB server.

        :param database: the name of the database to delete
        :type database: string
        :rtype: boolean
        """
        ...

    def get_list_database(self): # -> Any:
        """Get the list of databases."""
        ...

    def get_database_list(self): # -> Any:
        """Get the list of databases.

        DEPRECATED.
        """
        ...

    def delete_series(self, series): # -> Literal[True]:
        """Drop a series on the InfluxDB server.

        :param series: the name of the series to delete
        :type series: string
        :rtype: boolean
        """
        ...

    def get_list_series(self): # -> list[Any]:
        """Get a list of all time series in a database."""
        ...

    def get_list_continuous_queries(self): # -> list[Any]:
        """Get a list of continuous queries."""
        ...

    def get_list_cluster_admins(self): # -> Any:
        """Get list of cluster admins."""
        ...

    def add_cluster_admin(self, new_username, new_password): # -> Literal[True]:
        """Add cluster admin."""
        ...

    def update_cluster_admin_password(self, username, new_password): # -> Literal[True]:
        """Update cluster admin password."""
        ...

    def delete_cluster_admin(self, username): # -> Literal[True]:
        """Delete cluster admin."""
        ...

    def set_database_admin(self, username): # -> Literal[True]:
        """Set user as database admin."""
        ...

    def unset_database_admin(self, username): # -> Literal[True]:
        """Unset user as database admin."""
        ...

    def alter_database_admin(self, username, is_admin): # -> Literal[True]:
        """Alter the database admin."""
        ...

    def get_list_database_admins(self):
        """Get list of database admins.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def add_database_admin(self, new_username, new_password):
        """Add cluster admin.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def update_database_admin_password(self, username, new_password):
        """Update database admin password.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def delete_database_admin(self, username):
        """Delete database admin.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def get_database_users(self): # -> Any:
        """Get list of database users."""
        ...

    def add_database_user(self, new_username, new_password, permissions=...): # -> Literal[True]:
        """Add database user.

        :param permissions: A ``(readFrom, writeTo)`` tuple
        """
        ...

    def update_database_user_password(self, username, new_password): # -> Literal[True]:
        """Update password."""
        ...

    def alter_database_user(self, username, password=..., permissions=...): # -> Literal[True]:
        """Alter a database user and/or their permissions.

        :param permissions: A ``(readFrom, writeTo)`` tuple
        :raise TypeError: if permissions cannot be read.
        :raise ValueError: if neither password nor permissions provided.
        """
        ...

    def delete_database_user(self, username): # -> Literal[True]:
        """Delete database user."""
        ...

    def update_permission(self, username, json_body):
        """Update read/write permission.

        2013-11-08: This endpoint has not been implemented yet in ver0.0.8,
        but it is documented in http://influxdb.org/docs/api/http.html.
        See also: src/api/http/api.go:l57

        """
        ...

    def send_packet(self, packet): # -> None:
        """Send a UDP packet along the wire."""
        ...
