"""
This type stub file was generated by pyright.
"""

from google.auth import _helpers
from google.auth import credentials

"""External Account Authorized User Credentials.
This module provides credentials based on OAuth 2.0 access and refresh tokens.
These credentials usually access resources on behalf of a user (resource
owner).

Specifically, these are sourced using external identities via Workforce Identity Federation.

Obtaining the initial access and refresh token can be done through the Google Cloud CLI.

Example credential:
{
  "type": "external_account_authorized_user",
  "audience": "//iam.googleapis.com/locations/global/workforcePools/$WORKFORCE_POOL_ID/providers/$PROVIDER_ID",
  "refresh_token": "refreshToken",
  "token_url": "https://sts.googleapis.com/v1/oauth/token",
  "token_info_url": "https://sts.googleapis.com/v1/instrospect",
  "client_id": "clientId",
  "client_secret": "clientSecret"
}
"""
_EXTERNAL_ACCOUNT_AUTHORIZED_USER_JSON_TYPE = ...
class Credentials(credentials.CredentialsWithQuotaProject, credentials.ReadOnlyScoped, credentials.CredentialsWithTokenUri):
    """Credentials for External Account Authorized Users.

    This is used to instantiate Credentials for exchanging refresh tokens from
    authorized users for Google access token and authorizing requests to Google
    APIs.

    The credentials are considered immutable. If you want to modify the
    quota project, use `with_quota_project` and if you want to modify the token
    uri, use `with_token_uri`.
    """
    def __init__(self, token=..., expiry=..., refresh_token=..., audience=..., client_id=..., client_secret=..., token_url=..., token_info_url=..., revoke_url=..., scopes=..., quota_project_id=..., universe_domain=...) -> None:
        """Instantiates a external account authorized user credentials object.

        Args:
        token (str): The OAuth 2.0 access token. Can be None if refresh information
            is provided.
        expiry (datetime.datetime): The optional expiration datetime of the OAuth 2.0 access
            token.
        refresh_token (str): The optional OAuth 2.0 refresh token. If specified,
            credentials can be refreshed.
        audience (str): The optional STS audience which contains the resource name for the workforce
            pool and the provider identifier in that pool.
        client_id (str): The OAuth 2.0 client ID. Must be specified for refresh, can be left as
            None if the token can not be refreshed.
        client_secret (str): The OAuth 2.0 client secret. Must be specified for refresh, can be
            left as None if the token can not be refreshed.
        token_url (str): The optional STS token exchange endpoint for refresh. Must be specified for
            refresh, can be left as None if the token can not be refreshed.
        token_info_url (str): The optional STS endpoint URL for token introspection.
        revoke_url (str): The optional STS endpoint URL for revoking tokens.
        quota_project_id (str): The optional project ID used for quota and billing.
            This project may be different from the project used to
            create the credentials.
        universe_domain (Optional[str]): The universe domain. The default value
            is googleapis.com.

        Returns:
            google.auth.external_account_authorized_user.Credentials: The
                constructed credentials.
        """
        ...

    @property
    def info(self): # -> dict[str, Any | datetime | str]:
        """Generates the serializable dictionary representation of the current
        credentials.

        Returns:
            Mapping: The dictionary representation of the credentials. This is the
                reverse of the "from_info" method defined in this class. It is
                useful for serializing the current credentials so it can deserialized
                later.
        """
        ...

    def constructor_args(self): # -> dict[str, Any | datetime | str | None]:
        ...

    @property
    def scopes(self): # -> None:
        """Optional[str]: The OAuth 2.0 permission scopes."""
        ...

    @property
    def requires_scopes(self): # -> Literal[False]:
        """ False: OAuth 2.0 credentials have their scopes set when
        the initial token is requested and can not be changed."""
        ...

    @property
    def client_id(self): # -> None:
        """Optional[str]: The OAuth 2.0 client ID."""
        ...

    @property
    def client_secret(self): # -> None:
        """Optional[str]: The OAuth 2.0 client secret."""
        ...

    @property
    def audience(self): # -> None:
        """Optional[str]: The STS audience which contains the resource name for the
            workforce pool and the provider identifier in that pool."""
        ...

    @property
    def refresh_token(self): # -> Any | None:
        """Optional[str]: The OAuth 2.0 refresh token."""
        ...

    @property
    def token_url(self): # -> None:
        """Optional[str]: The STS token exchange endpoint for refresh."""
        ...

    @property
    def token_info_url(self): # -> None:
        """Optional[str]: The STS endpoint for token info."""
        ...

    @property
    def revoke_url(self): # -> None:
        """Optional[str]: The STS endpoint for token revocation."""
        ...

    @property
    def is_user(self): # -> Literal[True]:
        """ True: This credential always represents a user."""
        ...

    @property
    def can_refresh(self): # -> bool:
        ...

    def get_project_id(self, request=...): # -> None:
        """Retrieves the project ID corresponding to the workload identity or workforce pool.
        For workforce pool credentials, it returns the project ID corresponding to
        the workforce_pool_user_project.

        When not determinable, None is returned.

        Args:
            request (google.auth.transport.requests.Request): Request object.
                Unused here, but passed from _default.default().

        Return:
          str: project ID is not determinable for this credential type so it returns None
        """
        ...

    def to_json(self, strip=...): # -> str:
        """Utility function that creates a JSON representation of this
        credential.
        Args:
            strip (Sequence[str]): Optional list of members to exclude from the
                                   generated JSON.
        Returns:
            str: A JSON representation of this instance. When converted into
            a dictionary, it can be passed to from_info()
            to create a new instance.
        """
        ...

    def refresh(self, request): # -> None:
        """Refreshes the access token.

        Args:
            request (google.auth.transport.Request): The object used to make
                HTTP requests.

        Raises:
            google.auth.exceptions.RefreshError: If the credentials could
                not be refreshed.
        """
        ...

    @_helpers.copy_docstring(credentials.Credentials)
    def get_cred_info(self): # -> dict[str, str] | None:
        ...

    @_helpers.copy_docstring(credentials.CredentialsWithQuotaProject)
    def with_quota_project(self, quota_project_id): # -> Self:
        ...

    @_helpers.copy_docstring(credentials.CredentialsWithTokenUri)
    def with_token_uri(self, token_uri): # -> Self:
        ...

    @_helpers.copy_docstring(credentials.CredentialsWithUniverseDomain)
    def with_universe_domain(self, universe_domain): # -> Self:
        ...

    @classmethod
    def from_info(cls, info, **kwargs): # -> Self:
        """Creates a Credentials instance from parsed external account info.

        Args:
            info (Mapping[str, str]): The external account info in Google
                format.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            google.auth.external_account_authorized_user.Credentials: The
                constructed credentials.

        Raises:
            ValueError: For invalid parameters.
        """
        ...

    @classmethod
    def from_file(cls, filename, **kwargs): # -> Self:
        """Creates a Credentials instance from an external account json file.

        Args:
            filename (str): The path to the external account json file.
            kwargs: Additional arguments to pass to the constructor.

        Returns:
            google.auth.external_account_authorized_user.Credentials: The
                constructed credentials.
        """
        ...
