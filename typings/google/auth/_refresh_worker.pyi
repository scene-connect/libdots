"""
This type stub file was generated by pyright.
"""

import threading

_LOGGER = ...
class RefreshThreadManager:
    """
    Organizes exactly one background job that refresh a token.
    """
    def __init__(self) -> None:
        """Initializes the manager."""
        ...

    def start_refresh(self, cred, request): # -> bool:
        """Starts a refresh thread for the given credentials.
        The credentials are refreshed using the request parameter.
        request and cred MUST not be None

        Returns True if a background refresh was kicked off. False otherwise.

        Args:
            cred: A credentials object.
            request: A request object.
        Returns:
          bool
        """
        ...

    def clear_error(self): # -> None:
        """
      Removes any errors that were stored from previous background refreshes.
      """
        ...

    def __getstate__(self): # -> dict[str, Any]:
        """Pickle helper that serializes the _lock attribute."""
        ...

    def __setstate__(self, state): # -> None:
        """Pickle helper that deserializes the _lock attribute."""
        ...



class RefreshThread(threading.Thread):
    """
    Thread that refreshes credentials.
    """
    def __init__(self, cred, request, **kwargs) -> None:
        """Initializes the thread.

        Args:
            cred: A Credential object to refresh.
            request: A Request object used to perform a credential refresh.
            **kwargs: Additional keyword arguments.
        """
        ...

    def run(self): # -> None:
        """
        Perform the credential refresh.
        """
        ...
