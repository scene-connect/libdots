"""
This type stub file was generated by pyright.
"""

from typing import Dict
from typing import Optional
from typing import Union

import grpc

"""Exceptions raised by Google API core & clients.

This module provides base classes for all errors raised by libraries based
on :mod:`google.api_core`, including both HTTP and gRPC clients.
"""
_HTTP_CODE_TO_EXCEPTION: Dict[int, Exception] = ...
_GRPC_CODE_TO_EXCEPTION: Dict[int, Exception] = ...
_INT_TO_GRPC_CODE = ...
if grpc is not None:
    ...
class GoogleAPIError(Exception):
    """Base class for all exceptions raised by Google API Clients."""
    ...


class DuplicateCredentialArgs(GoogleAPIError):
    """Raised when multiple credentials are passed."""
    ...


class RetryError(GoogleAPIError):
    """Raised when a function has exhausted all of its available retries.

    Args:
        message (str): The exception message.
        cause (Exception): The last exception raised when retrying the
            function.
    """
    def __init__(self, message, cause) -> None:
        ...

    @property
    def cause(self): # -> Any:
        """The last exception raised when retrying the function."""
        ...

    def __str__(self) -> str:
        ...



class _GoogleAPICallErrorMeta(type):
    """Metaclass for registering GoogleAPICallError subclasses."""
    def __new__(mcs, name, bases, class_dict): # -> Self:
        ...



class GoogleAPICallError(GoogleAPIError, metaclass=_GoogleAPICallErrorMeta):
    """Base class for exceptions raised by calling API methods.

    Args:
        message (str): The exception message.
        errors (Sequence[Any]): An optional list of error details.
        details (Sequence[Any]): An optional list of objects defined in google.rpc.error_details.
        response (Union[requests.Request, grpc.Call]): The response or
            gRPC call metadata.
        error_info (Union[error_details_pb2.ErrorInfo, None]): An optional object containing error info
            (google.rpc.error_details.ErrorInfo).
    """
    code: Union[int, None] = ...
    grpc_status_code = ...
    def __init__(self, message, errors=..., details=..., response=..., error_info=...) -> None:
        ...

    def __str__(self) -> str:
        ...

    @property
    def reason(self): # -> None:
        """The reason of the error.

        Reference:
            https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto#L112

        Returns:
            Union[str, None]: An optional string containing reason of the error.
        """
        ...

    @property
    def domain(self): # -> None:
        """The logical grouping to which the "reason" belongs.

        Reference:
            https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto#L112

        Returns:
            Union[str, None]: An optional string containing a logical grouping to which the "reason" belongs.
        """
        ...

    @property
    def metadata(self): # -> None:
        """Additional structured details about this error.

        Reference:
            https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto#L112

        Returns:
            Union[Dict[str, str], None]: An optional object containing structured details about the error.
        """
        ...

    @property
    def errors(self): # -> list[Any]:
        """Detailed error information.

        Returns:
            Sequence[Any]: A list of additional error details.
        """
        ...

    @property
    def details(self): # -> list[Any]:
        """Information contained in google.rpc.status.details.

        Reference:
            https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto
            https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto

        Returns:
            Sequence[Any]: A list of structured objects from error_details.proto
        """
        ...

    @property
    def response(self): # -> None:
        """Optional[Union[requests.Request, grpc.Call]]: The response or
        gRPC call metadata."""
        ...



class Redirection(GoogleAPICallError):
    """Base class for for all redirection (HTTP 3xx) responses."""
    ...


class MovedPermanently(Redirection):
    """Exception mapping a ``301 Moved Permanently`` response."""
    code = ...


class NotModified(Redirection):
    """Exception mapping a ``304 Not Modified`` response."""
    code = ...


class TemporaryRedirect(Redirection):
    """Exception mapping a ``307 Temporary Redirect`` response."""
    code = ...


class ResumeIncomplete(Redirection):
    """Exception mapping a ``308 Resume Incomplete`` response.

    .. note:: :attr:`http.client.PERMANENT_REDIRECT` is ``308``, but Google
        APIs differ in their use of this status code.
    """
    code = ...


class ClientError(GoogleAPICallError):
    """Base class for all client error (HTTP 4xx) responses."""
    ...


class BadRequest(ClientError):
    """Exception mapping a ``400 Bad Request`` response."""
    code = ...


class InvalidArgument(BadRequest):
    """Exception mapping a :attr:`grpc.StatusCode.INVALID_ARGUMENT` error."""
    grpc_status_code = ...


class FailedPrecondition(BadRequest):
    """Exception mapping a :attr:`grpc.StatusCode.FAILED_PRECONDITION`
    error."""
    grpc_status_code = ...


class OutOfRange(BadRequest):
    """Exception mapping a :attr:`grpc.StatusCode.OUT_OF_RANGE` error."""
    grpc_status_code = ...


class Unauthorized(ClientError):
    """Exception mapping a ``401 Unauthorized`` response."""
    code = ...


class Unauthenticated(Unauthorized):
    """Exception mapping a :attr:`grpc.StatusCode.UNAUTHENTICATED` error."""
    grpc_status_code = ...


class Forbidden(ClientError):
    """Exception mapping a ``403 Forbidden`` response."""
    code = ...


class PermissionDenied(Forbidden):
    """Exception mapping a :attr:`grpc.StatusCode.PERMISSION_DENIED` error."""
    grpc_status_code = ...


class NotFound(ClientError):
    """Exception mapping a ``404 Not Found`` response or a
    :attr:`grpc.StatusCode.NOT_FOUND` error."""
    code = ...
    grpc_status_code = ...


class MethodNotAllowed(ClientError):
    """Exception mapping a ``405 Method Not Allowed`` response."""
    code = ...


class Conflict(ClientError):
    """Exception mapping a ``409 Conflict`` response."""
    code = ...


class AlreadyExists(Conflict):
    """Exception mapping a :attr:`grpc.StatusCode.ALREADY_EXISTS` error."""
    grpc_status_code = ...


class Aborted(Conflict):
    """Exception mapping a :attr:`grpc.StatusCode.ABORTED` error."""
    grpc_status_code = ...


class LengthRequired(ClientError):
    """Exception mapping a ``411 Length Required`` response."""
    code = ...


class PreconditionFailed(ClientError):
    """Exception mapping a ``412 Precondition Failed`` response."""
    code = ...


class RequestRangeNotSatisfiable(ClientError):
    """Exception mapping a ``416 Request Range Not Satisfiable`` response."""
    code = ...


class TooManyRequests(ClientError):
    """Exception mapping a ``429 Too Many Requests`` response."""
    code = ...


class ResourceExhausted(TooManyRequests):
    """Exception mapping a :attr:`grpc.StatusCode.RESOURCE_EXHAUSTED` error."""
    grpc_status_code = ...


class Cancelled(ClientError):
    """Exception mapping a :attr:`grpc.StatusCode.CANCELLED` error."""
    code = ...
    grpc_status_code = ...


class ServerError(GoogleAPICallError):
    """Base for 5xx responses."""
    ...


class InternalServerError(ServerError):
    """Exception mapping a ``500 Internal Server Error`` response. or a
    :attr:`grpc.StatusCode.INTERNAL` error."""
    code = ...
    grpc_status_code = ...


class Unknown(ServerError):
    """Exception mapping a :attr:`grpc.StatusCode.UNKNOWN` error."""
    grpc_status_code = ...


class DataLoss(ServerError):
    """Exception mapping a :attr:`grpc.StatusCode.DATA_LOSS` error."""
    grpc_status_code = ...


class MethodNotImplemented(ServerError):
    """Exception mapping a ``501 Not Implemented`` response or a
    :attr:`grpc.StatusCode.UNIMPLEMENTED` error."""
    code = ...
    grpc_status_code = ...


class BadGateway(ServerError):
    """Exception mapping a ``502 Bad Gateway`` response."""
    code = ...


class ServiceUnavailable(ServerError):
    """Exception mapping a ``503 Service Unavailable`` response or a
    :attr:`grpc.StatusCode.UNAVAILABLE` error."""
    code = ...
    grpc_status_code = ...


class GatewayTimeout(ServerError):
    """Exception mapping a ``504 Gateway Timeout`` response."""
    code = ...


class DeadlineExceeded(GatewayTimeout):
    """Exception mapping a :attr:`grpc.StatusCode.DEADLINE_EXCEEDED` error."""
    grpc_status_code = ...


class AsyncRestUnsupportedParameterError(NotImplementedError):
    """Raised when an unsupported parameter is configured against async rest transport."""
    ...


def exception_class_for_http_status(status_code): # -> Exception | type[GoogleAPICallError]:
    """Return the exception class for a specific HTTP status code.

    Args:
        status_code (int): The HTTP status code.

    Returns:
        :func:`type`: the appropriate subclass of :class:`GoogleAPICallError`.
    """
    ...

def from_http_status(status_code, message, **kwargs): # -> GoogleAPICallError:
    """Create a :class:`GoogleAPICallError` from an HTTP status code.

    Args:
        status_code (int): The HTTP status code.
        message (str): The exception message.
        kwargs: Additional arguments passed to the :class:`GoogleAPICallError`
            constructor.

    Returns:
        GoogleAPICallError: An instance of the appropriate subclass of
            :class:`GoogleAPICallError`.
    """
    ...

def format_http_response_error(response, method: str, url: str, payload: Optional[Dict] = ...): # -> GoogleAPICallError:
    """Create a :class:`GoogleAPICallError` from a google auth rest response.

    Args:
        response Union[google.auth.transport.Response, google.auth.aio.transport.Response]: The HTTP response.
        method Optional(str): The HTTP request method.
        url Optional(str): The HTTP request url.
        payload Optional(dict): The HTTP response payload. If not passed in, it is read from response for a response type of google.auth.transport.Response.

    Returns:
        GoogleAPICallError: An instance of the appropriate subclass of
            :class:`GoogleAPICallError`, with the message and errors populated
            from the response.
    """
    ...

def from_http_response(response): # -> GoogleAPICallError:
    """Create a :class:`GoogleAPICallError` from a :class:`requests.Response`.

    Args:
        response (requests.Response): The HTTP response.

    Returns:
        GoogleAPICallError: An instance of the appropriate subclass of
            :class:`GoogleAPICallError`, with the message and errors populated
            from the response.
    """
    ...

def exception_class_for_grpc_status(status_code): # -> Exception | type[GoogleAPICallError]:
    """Return the exception class for a specific :class:`grpc.StatusCode`.

    Args:
        status_code (grpc.StatusCode): The gRPC status code.

    Returns:
        :func:`type`: the appropriate subclass of :class:`GoogleAPICallError`.
    """
    ...

def from_grpc_status(status_code, message, **kwargs): # -> GoogleAPICallError:
    """Create a :class:`GoogleAPICallError` from a :class:`grpc.StatusCode`.

    Args:
        status_code (Union[grpc.StatusCode, int]): The gRPC status code.
        message (str): The exception message.
        kwargs: Additional arguments passed to the :class:`GoogleAPICallError`
            constructor.

    Returns:
        GoogleAPICallError: An instance of the appropriate subclass of
            :class:`GoogleAPICallError`.
    """
    ...

def from_grpc_error(rpc_exc): # -> GoogleAPICallError:
    """Create a :class:`GoogleAPICallError` from a :class:`grpc.RpcError`.

    Args:
        rpc_exc (grpc.RpcError): The gRPC error.

    Returns:
        GoogleAPICallError: An instance of the appropriate subclass of
            :class:`GoogleAPICallError`.
    """
    ...
