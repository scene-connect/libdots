"""
This type stub file was generated by pyright.
"""

from email.mime.application import MIMEApplication

import requests
from google.cloud.storage._http import Connection

"""Batch updates / deletes of storage buckets / blobs.

A batch request is a single standard HTTP request containing multiple Cloud Storage JSON API calls.
Within this main HTTP request, there are multiple parts which each contain a nested HTTP request.
The body of each part is itself a complete HTTP request, with its own verb, URL, headers, and body.

Note that Cloud Storage does not support batch operations for uploading or downloading.
Additionally, the current batch design does not support library methods whose return values
depend on the response payload. See more details in the [Sending Batch Requests official guide](https://cloud.google.com/storage/docs/batch).

Examples of situations when you might want to use the Batch module:
``blob.patch()``
``blob.update()``
``blob.delete()``
``bucket.delete_blob()``
``bucket.patch()``
``bucket.update()``
"""
class MIMEApplicationHTTP(MIMEApplication):
    """MIME type for ``application/http``.

    Constructs payload from headers and body

    :type method: str
    :param method: HTTP method

    :type uri: str
    :param uri: URI for HTTP request

    :type headers:  dict
    :param headers: HTTP headers

    :type body: str
    :param body: (Optional) HTTP payload

    """
    def __init__(self, method, uri, headers, body) -> None:
        ...



class _FutureDict:
    """Class to hold a future value for a deferred request.

    Used by for requests that get sent in a :class:`Batch`.
    """
    @staticmethod
    def get(key, default=...):
        """Stand-in for dict.get.

        :type key: object
        :param key: Hashable dictionary key.

        :type default: object
        :param default: Fallback value to dict.get.

        :raises: :class:`KeyError` always since the future is intended to fail
                 as a dictionary.
        """
        ...

    def __getitem__(self, key):
        """Stand-in for dict[key].

        :type key: object
        :param key: Hashable dictionary key.

        :raises: :class:`KeyError` always since the future is intended to fail
                 as a dictionary.
        """
        ...

    def __setitem__(self, key, value):
        """Stand-in for dict[key] = value.

        :type key: object
        :param key: Hashable dictionary key.

        :type value: object
        :param value: Dictionary value.

        :raises: :class:`KeyError` always since the future is intended to fail
                 as a dictionary.
        """
        ...



class _FutureResponse(requests.Response):
    """Reponse that returns a placeholder dictionary for a batched requests."""
    def __init__(self, future_dict) -> None:
        ...

    def json(self): # -> Any:
        ...

    @property
    def content(self): # -> Any:
        ...



class Batch(Connection):
    """Proxy an underlying connection, batching up change operations.

    .. warning::

        Cloud Storage does not support batch operations for uploading or downloading.
        Additionally, the current batch design does not support library methods whose
        return values depend on the response payload.

    :type client: :class:`google.cloud.storage.client.Client`
    :param client: The client to use for making connections.

    :type raise_exception: bool
    :param raise_exception:
        (Optional) Defaults to True. If True, instead of adding exceptions
        to the list of return responses, the final exception will be raised.
        Note that exceptions are unwrapped after all operations are complete
        in success or failure, and only the last exception is raised.
    """
    _MAX_BATCH_SIZE = ...
    def __init__(self, client, raise_exception=...) -> None:
        ...

    def finish(self, raise_exception=...): # -> list[Response]:
        """Submit a single `multipart/mixed` request with deferred requests.

        :type raise_exception: bool
        :param raise_exception:
            (Optional) Defaults to True. If True, instead of adding exceptions
            to the list of return responses, the final exception will be raised.
            Note that exceptions are unwrapped after all operations are complete
            in success or failure, and only the last exception is raised.

        :rtype: list of tuples
        :returns: one ``(headers, payload)`` tuple per deferred request.
        """
        ...

    def current(self):
        """Return the topmost batch, or None."""
        ...

    def __enter__(self): # -> Self:
        ...

    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
