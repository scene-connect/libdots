"""
This type stub file was generated by pyright.
"""

from google.cloud.storage._opentelemetry_tracing import create_trace_span

"""Configure HMAC keys that can be used to authenticate requests to Google Cloud Storage.

See [HMAC keys documentation](https://cloud.google.com/storage/docs/authentication/hmackeys)
"""
class HMACKeyMetadata:
    """Metadata about an HMAC service account key withn Cloud Storage.

    :type client: :class:`~google.cloud.stoage.client.Client`
    :param client: client associated with the key metadata.

    :type access_id: str
    :param access_id: (Optional) Unique ID of an existing key.

    :type project_id: str
    :param project_id: (Optional) Project ID of an existing key.
        Defaults to client's project.

    :type user_project: str
    :param user_project: (Optional) This parameter is currently ignored.
    """
    ACTIVE_STATE = ...
    INACTIVE_STATE = ...
    DELETED_STATE = ...
    _SETTABLE_STATES = ...
    def __init__(self, client, access_id=..., project_id=..., user_project=...) -> None:
        ...

    def __eq__(self, other) -> bool:
        ...

    def __hash__(self) -> int:
        ...

    @property
    def access_id(self): # -> None:
        """Access ID of the key.

        :rtype: str or None
        :returns: unique identifier of the key within a project.
        """
        ...

    @property
    def etag(self): # -> None:
        """ETag identifying the version of the key metadata.

        :rtype: str or None
        :returns: ETag for the version of the key's metadata.
        """
        ...

    @property
    def id(self): # -> None:
        """ID of the key, including the Project ID and the Access ID.

        :rtype: str or None
        :returns: ID of the key.
        """
        ...

    @property
    def project(self): # -> None:
        """Project ID associated with the key.

        :rtype: str or None
        :returns: project identfier for the key.
        """
        ...

    @property
    def service_account_email(self): # -> None:
        """Service account e-mail address associated with the key.

        :rtype: str or None
        :returns: e-mail address for the service account which created the key.
        """
        ...

    @property
    def state(self): # -> None:
        """Get / set key's state.

        One of:
            - ``ACTIVE``
            - ``INACTIVE``
            - ``DELETED``

        :rtype: str or None
        :returns: key's current state.
        """
        ...

    @state.setter
    def state(self, value): # -> None:
        ...

    @property
    def time_created(self): # -> datetime | None:
        """Retrieve the timestamp at which the HMAC key was created.

        :rtype: :class:`datetime.datetime` or ``NoneType``
        :returns: Datetime object parsed from RFC3339 valid timestamp, or
                  ``None`` if the bucket's resource has not been loaded
                  from the server.
        """
        ...

    @property
    def updated(self): # -> datetime | None:
        """Retrieve the timestamp at which the HMAC key was created.

        :rtype: :class:`datetime.datetime` or ``NoneType``
        :returns: Datetime object parsed from RFC3339 valid timestamp, or
                  ``None`` if the bucket's resource has not been loaded
                  from the server.
        """
        ...

    @property
    def path(self): # -> str:
        """Resource path for the metadata's key."""
        ...

    @property
    def user_project(self): # -> None:
        """Project ID to be billed for API requests made via this bucket.

        This property is currently ignored by the server.

        :rtype: str
        """
        ...

    @create_trace_span(name="Storage.HmacKey.exists")
    def exists(self, timeout=..., retry=...): # -> bool:
        """Determine whether or not the key for this metadata exists.

        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :rtype: bool
        :returns: True if the key exists in Cloud Storage.
        """
        ...

    @create_trace_span(name="Storage.HmacKey.reload")
    def reload(self, timeout=..., retry=...): # -> None:
        """Reload properties from Cloud Storage.

        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :raises :class:`~google.api_core.exceptions.NotFound`:
            if the key does not exist on the back-end.
        """
        ...

    @create_trace_span(name="Storage.HmacKey.update")
    def update(self, timeout=..., retry=...): # -> None:
        """Save writable properties to Cloud Storage.

        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :raises :class:`~google.api_core.exceptions.NotFound`:
            if the key does not exist on the back-end.
        """
        ...

    @create_trace_span(name="Storage.HmacKey.delete")
    def delete(self, timeout=..., retry=...): # -> None:
        """Delete the key from Cloud Storage.

        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :raises :class:`~google.api_core.exceptions.NotFound`:
            if the key does not exist on the back-end.
        """
        ...
