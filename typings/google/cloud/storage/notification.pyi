"""
This type stub file was generated by pyright.
"""

from google.cloud.storage._opentelemetry_tracing import create_trace_span

"""Configure bucket notification resources to interact with Google Cloud Pub/Sub.

See [Cloud Pub/Sub Notifications for Google Cloud Storage](https://cloud.google.com/storage/docs/pubsub-notifications)
"""
OBJECT_FINALIZE_EVENT_TYPE = ...
OBJECT_METADATA_UPDATE_EVENT_TYPE = ...
OBJECT_DELETE_EVENT_TYPE = ...
OBJECT_ARCHIVE_EVENT_TYPE = ...
JSON_API_V1_PAYLOAD_FORMAT = ...
NONE_PAYLOAD_FORMAT = ...
_TOPIC_REF_FMT = ...
_PROJECT_PATTERN = ...
_TOPIC_NAME_PATTERN = ...
_TOPIC_REF_PATTERN = ...
_TOPIC_REF_RE = ...
_BAD_TOPIC = ...
class BucketNotification:
    """Represent a single notification resource for a bucket.

    See: https://cloud.google.com/storage/docs/json_api/v1/notifications

    :type bucket: :class:`google.cloud.storage.bucket.Bucket`
    :param bucket: Bucket to which the notification is bound.

    :type topic_name: str
    :param topic_name:
        (Optional) Topic name to which notifications are published.

    :type topic_project: str
    :param topic_project:
        (Optional) Project ID of topic to which notifications are published.
        If not passed, uses the project ID of the bucket's client.

    :type custom_attributes: dict
    :param custom_attributes:
        (Optional) Additional attributes passed with notification events.

    :type event_types: list(str)
    :param event_types:
        (Optional) Event types for which notification events are published.

    :type blob_name_prefix: str
    :param blob_name_prefix:
        (Optional) Prefix of blob names for which notification events are
        published.

    :type payload_format: str
    :param payload_format:
        (Optional) Format of payload for notification events.

    :type notification_id: str
    :param notification_id:
        (Optional) The ID of the notification.
    """
    def __init__(self, bucket, topic_name=..., topic_project=..., custom_attributes=..., event_types=..., blob_name_prefix=..., payload_format=..., notification_id=...) -> None:
        ...

    @classmethod
    def from_api_repr(cls, resource, bucket): # -> Self:
        """Construct an instance from the JSON repr returned by the server.

        See: https://cloud.google.com/storage/docs/json_api/v1/notifications

        :type resource: dict
        :param resource: JSON repr of the notification

        :type bucket: :class:`google.cloud.storage.bucket.Bucket`
        :param bucket: Bucket to which the notification is bound.

        :rtype: :class:`BucketNotification`
        :returns: the new notification instance
        """
        ...

    @property
    def bucket(self): # -> Any:
        """Bucket to which the notification is bound."""
        ...

    @property
    def topic_name(self): # -> None:
        """Topic name to which notifications are published."""
        ...

    @property
    def topic_project(self):
        """Project ID of topic to which notifications are published."""
        ...

    @property
    def custom_attributes(self): # -> None:
        """Custom attributes passed with notification events."""
        ...

    @property
    def event_types(self): # -> None:
        """Event types for which notification events are published."""
        ...

    @property
    def blob_name_prefix(self): # -> None:
        """Prefix of blob names for which notification events are published."""
        ...

    @property
    def payload_format(self): # -> None:
        """Format of payload of notification events."""
        ...

    @property
    def notification_id(self): # -> None:
        """Server-set ID of notification resource."""
        ...

    @property
    def etag(self): # -> None:
        """Server-set ETag of notification resource."""
        ...

    @property
    def self_link(self): # -> None:
        """Server-set ETag of notification resource."""
        ...

    @property
    def client(self):
        """The client bound to this notfication."""
        ...

    @property
    def path(self): # -> str:
        """The URL path for this notification."""
        ...

    @create_trace_span(name="Storage.BucketNotification.create")
    def create(self, client=..., timeout=..., retry=...): # -> None:
        """API wrapper: create the notification.

        See:
        https://cloud.google.com/storage/docs/json_api/v1/notifications/insert

        If :attr:`user_project` is set on the bucket, bills the API request
        to that project.

        :type client: :class:`~google.cloud.storage.client.Client`
        :param client: (Optional) The client to use.  If not passed, falls back
                       to the ``client`` stored on the notification's bucket.
        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :raises ValueError: if the notification already exists.
        """
        ...

    @create_trace_span(name="Storage.BucketNotification.exists")
    def exists(self, client=..., timeout=..., retry=...): # -> bool:
        """Test whether this notification exists.

        See:
        https://cloud.google.com/storage/docs/json_api/v1/notifications/get

        If :attr:`user_project` is set on the bucket, bills the API request
        to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: (Optional) The client to use.  If not passed, falls back
                       to the ``client`` stored on the current bucket.
        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :rtype: bool
        :returns: True, if the notification exists, else False.
        :raises ValueError: if the notification has no ID.
        """
        ...

    @create_trace_span(name="Storage.BucketNotification.reload")
    def reload(self, client=..., timeout=..., retry=...): # -> None:
        """Update this notification from the server configuration.

        See:
        https://cloud.google.com/storage/docs/json_api/v1/notifications/get

        If :attr:`user_project` is set on the bucket, bills the API request
        to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: (Optional) The client to use.  If not passed, falls back
                       to the ``client`` stored on the current bucket.
        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`


        :raises ValueError: if the notification has no ID.
        """
        ...

    @create_trace_span(name="Storage.BucketNotification.delete")
    def delete(self, client=..., timeout=..., retry=...): # -> None:
        """Delete this notification.

        See:
        https://cloud.google.com/storage/docs/json_api/v1/notifications/delete

        If :attr:`user_project` is set on the bucket, bills the API request
        to that project.

        :type client: :class:`~google.cloud.storage.client.Client` or
                      ``NoneType``
        :param client: (Optional) The client to use.  If not passed, falls back
                       to the ``client`` stored on the current bucket.
        :type timeout: float or tuple
        :param timeout:
            (Optional) The amount of time, in seconds, to wait
            for the server response.  See: :ref:`configuring_timeouts`

        :type retry: google.api_core.retry.Retry or google.cloud.storage.retry.ConditionalRetryPolicy
        :param retry:
            (Optional) How to retry the RPC. See: :ref:`configuring_retries`

        :raises: :class:`google.api_core.exceptions.NotFound`:
            if the notification does not exist.
        :raises ValueError: if the notification has no ID.
        """
        ...
