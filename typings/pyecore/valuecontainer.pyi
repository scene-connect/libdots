"""
This type stub file was generated by pyright.
"""

from .ordered_set_patch import ordered_set
from collections.abc import MutableSequence, MutableSet

class BadValueError(TypeError):
    def __init__(self, got=..., expected=..., feature=...) -> None:
        ...



class EcoreUtils:
    @staticmethod
    def isinstance(obj, _type, _isinstance=...): # -> bool:
        ...

    @staticmethod
    def get_root(obj): # -> None:
        ...



class PyEcoreValue:
    def __init__(self, owner, efeature) -> None:
        ...

    def check(self, value, _isinstance=...): # -> None:
        ...



class EValue(PyEcoreValue):
    def __init__(self, owner, efeature) -> None:
        ...

    def remove_or_unset(self, value, update_opposite=...): # -> None:
        ...



class ECollection(PyEcoreValue):
    @staticmethod
    def create(owner, feature): # -> EDerivedCollection | EOrderedSet | EList | ESet | EBag:
        ...

    def __init__(self, owner, efeature) -> None:
        ...

    def remove_or_unset(self, value, update_opposite=...): # -> None:
        ...

    def remove(self, value, update_opposite=...): # -> None:
        ...

    def insert(self, i, y): # -> None:
        ...

    def pop(self, index=...):
        ...

    def clear(self): # -> None:
        ...

    def select(self, f): # -> list[Any]:
        ...

    def reject(self, f): # -> list[Any]:
        ...

    def __iadd__(self, items): # -> Self:
        ...



class EList(ECollection, list):
    def __init__(self, owner, efeature=...) -> None:
        ...

    def append(self, value, update_opposite=...): # -> None:
        ...

    def extend(self, sublist): # -> None:
        ...

    update = ...
    def __setitem__(self, i, y): # -> None:
        ...



class EBag(EList):
    ...


class EAbstractSet(ECollection):
    def __init__(self, owner, efeature=...) -> None:
        ...

    def add(self, value, update_opposite=...): # -> None:
        ...

    append = ...
    def update(self, others): # -> None:
        ...

    extend = ...


class EOrderedSet(EAbstractSet, ordered_set.OrderedSet):
    def __init__(self, owner, efeature=...) -> None:
        ...

    def copy(self): # -> OrderedSet[Any]:
        ...

    @staticmethod
    def subcopy(sublist): # -> OrderedSet[Any]:
        ...



class ESet(EOrderedSet):
    ...


class EDerivedCollection(MutableSet, MutableSequence, ECollection):
    @classmethod
    def create(cls, owner, feature=...): # -> Self:
        ...

    def __init__(self, owner, feature=...) -> None:
        ...

    def __delitem__(self, index):
        ...

    def __getitem__(self, index):
        ...

    def __len__(self):
        ...

    def __setitem__(self, index, item):
        ...

    def add(self, value):
        ...

    def discard(self, value):
        ...

    def insert(self, index, value):
        ...
