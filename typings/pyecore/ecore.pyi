"""
This type stub file was generated by pyright.
"""

from collections.abc import Generator

from .notification import ENotifer

"""This module is the heart of PyEcore. It defines all the basic concepts that
are common to EMF-Java and PyEcore (EObject/EClass...).
It defines the basic classes and behavior for PyEcore implementation:

* EObject
* EPackage
* EClass
* EAttribute
* EReference
* EDataType

These concepts are enough if dynamic metamodel instance are handled (code
generation is not required).

In addition, ``@EMetaclass`` annotation and ``MetaEClass`` metaclass are
used for static metamodels definition.
"""
name = ...
nsPrefix = ...
nsURI = ...
eClassifiers = ...
eSubpackages = ...

def default_eURIFragment():  # -> Literal['/']:
    """
    Gets the default root URI fragment.

    :return: the root URI fragment
    :rtype: str
    """
    ...

def eURIFragment():  # -> Literal['#/']:
    """
    Gets the URI fragment for the Ecore module.

    :return: the root URI fragment for Ecore
    :rtype: str
    """
    ...

def getEClassifier(name, searchspace=...):  # -> None:
    ...

class Core:
    @classmethod
    def register_classifier(cls, rcls, abstract=..., promote=...):  # -> None:
        ...

class Metasubinstance(type):
    def __subclasscheck__(cls, other):  # -> bool:
        ...

class MetaEClass(Metasubinstance):
    def __init__(cls, name, bases, nmspc) -> None: ...
    def __call__(cls, *args, **kwargs):  # -> Any:
        ...

    @property
    def eResource(cls): ...

class EObject(ENotifer, metaclass=Metasubinstance):
    _staticEClass = ...
    _instances = ...
    def __new__(cls, *args, **kwargs):  # -> Self:
        ...

    def __init__(self, **kwargs) -> None: ...
    def force_resolve(self):  # -> Self:
        ...

    @classmethod
    def allInstances(cls, resources=...):  # -> Generator[Self, Any, None]:
        ...

    def eContainer(self): ...
    def eContainmentFeature(self): ...
    def eIsSet(self, feature):  # -> bool:
        ...

    @property
    def eResource(self): ...
    def eGet(self, feature):  # -> Any:
        ...

    def eSet(self, feature, value):  # -> None:
        ...

    def delete(self, recursive=...):  # -> None:
        ...

    @property
    def eContents(self):  # -> list[Any]:
        ...

    def eAllContents(self) -> Generator[EObject]: ...
    def eURIFragment(self):  # -> str:
        ...

    def eRoot(self):  # -> Self:
        ...

    def __dir__(self):  # -> list[Any]:
        ...

class EModelElement(EObject):
    def __init__(self, **kwargs) -> None: ...
    def eURIFragment(self):  # -> str:
        ...

    def getEAnnotation(self, source):  # -> None:
        """Return the annotation with a matching source attribute."""
        ...

class EAnnotation(EModelElement):
    def __init__(self, source=..., **kwargs) -> None: ...

class ENamedElement(EModelElement):
    def __init__(self, name=..., **kwargs) -> None: ...

class SpecialEPackage(Metasubinstance):
    def __instancecheck__(cls, instance):  # -> bool:
        ...

class EPackage(ENamedElement, metaclass=SpecialEPackage):
    def __init__(self, name=..., nsURI=..., nsPrefix=..., **kwargs) -> None: ...
    def getEClassifier(self, name):  # -> None:
        ...

class ETypedElement(ENamedElement):
    def __init__(
        self,
        name=...,
        eType=...,
        ordered=...,
        unique=...,
        lower=...,
        upper=...,
        required=...,
        eGenericType=...,
        **kwargs
    ) -> None: ...
    def notifyChanged(self, notif):  # -> None:
        ...

    @property
    def upper(self):  # -> int:
        ...

    @property
    def lower(self):  # -> int:
        ...

    @property
    def many(self):  # -> bool:
        ...

class EOperation(ETypedElement):
    def __init__(
        self, name=..., eType=..., params=..., exceptions=..., **kwargs
    ) -> None: ...
    def normalized_name(self):  # -> None:
        ...

    def to_code(self):  # -> str:
        ...

class EParameter(ETypedElement):
    def __init__(self, name=..., eType=..., **kwargs) -> None: ...
    def to_code(self):  # -> str:
        ...

class ETypeParameter(ENamedElement):
    def __init__(self, name=..., eBounds=..., **kwargs) -> None: ...
    def raw_types(self):  # -> type[object] | tuple[Any, ...]:
        ...

    def __instancecheck__(self, instance):  # -> bool:
        ...

    def __str__(self) -> str: ...

class EGenericType(EObject):
    def __init__(self, eTypeParameter=..., eClassifier=..., **kwargs) -> None: ...
    @property
    def eRawType(self):  # -> None:
        ...

    def notifyChanged(self, notif):  # -> None:
        ...

class EClassifier(ENamedElement):
    def __init__(self, name=..., **kwargs) -> None: ...
    @staticmethod
    def __isinstance__(self, instance=...):  # -> Any | bool:
        ...

class EDataType(EClassifier):
    transmap = ...
    def __init__(
        self,
        name=...,
        eType=...,
        default_value=...,
        from_string=...,
        to_string=...,
        instanceClassName=...,
        type_as_factory=...,
        **kwargs
    ) -> None: ...
    def from_string(self, value): ...
    def to_string(self, value):  # -> str:
        ...

    def __instancecheck__(self, instance):  # -> bool:
        ...

    @property
    def default_value(
        self,
    ):  # -> bool | bytearray | datetime | float | int | object | str | Any | dict[Any, Any] | list[Any] | set[Any] | None:
        ...

    @default_value.setter
    def default_value(self, value):  # -> None:
        ...

    @property
    def instanceClassName(self):  # -> None:
        ...

    @instanceClassName.setter
    def instanceClassName(self, name):  # -> None:
        ...

    def __repr__(self):  # -> str:
        ...

class EEnum(EDataType):
    def __init__(self, name=..., default_value=..., literals=..., **kwargs) -> None: ...
    def notifyChanged(self, notif):  # -> None:
        ...

    @property
    def default_value(self):  # -> None:
        ...

    @default_value.setter
    def default_value(self, value):  # -> None:
        ...

    def __contains__(self, key):  # -> bool:
        ...

    def __instancecheck__(self, instance):  # -> bool:
        ...

    def getEEnumLiteral(self, name=..., value=...):  # -> None:
        ...

    def from_string(self, value):  # -> None:
        ...

    def __repr__(self):  # -> str:
        ...

class EEnumLiteral(ENamedElement):
    def __init__(self, name=..., value=..., **kwargs) -> None: ...
    def __repr__(self):  # -> str:
        ...

    def __str__(self) -> str: ...

class EStructuralFeature(ETypedElement):
    def __init__(
        self,
        name=...,
        eType=...,
        changeable=...,
        volatile=...,
        transient=...,
        unsettable=...,
        derived=...,
        derived_class=...,
        **kwargs
    ) -> None: ...
    def notifyChanged(self, notif):  # -> None:
        ...

    def __get__(
        self, instance, owner=...
    ):  # -> Self | EBag | ESet | EDerivedCollection | EList | EOrderedSet:
        ...

    def __set__(self, instance, value):  # -> None:
        ...

    def __delete__(self, instance):  # -> None:
        ...

    def __repr__(self):  # -> str:
        ...

class EAttribute(EStructuralFeature):
    def __init__(
        self,
        name=...,
        eType=...,
        default_value=...,
        iD=...,
        defaultValueLiteral=...,
        **kwargs
    ) -> None: ...
    def get_default_value(
        self,
    ):  # -> object | bool | bytearray | datetime | float | int | str | Any | dict[Any, Any] | list[Any] | set[Any]:
        ...

    @property
    def is_reference(self):  # -> Literal[False]:
        ...

    @property
    def is_attribute(self):  # -> Literal[True]:
        ...

class EReference(EStructuralFeature):
    def __init__(
        self, name=..., eType=..., containment=..., eOpposite=..., **kwargs
    ) -> None: ...
    @staticmethod
    def get_default_value():  # -> None:
        ...

    @property
    def eOpposite(self): ...
    @eOpposite.setter
    def eOpposite(self, value):  # -> None:
        ...

    @property
    def container(self): ...
    @property
    def is_reference(self):  # -> Literal[True]:
        ...

    @property
    def is_attribute(self):  # -> Literal[False]:
        ...

class EClass(EClassifier):
    def __new__(cls, name=..., superclass=..., metainstance=..., **kwargs):  # -> Self:
        ...

    def __mro_entries__(self, old_base):  # -> tuple[Any]:
        ...

    def __init__(
        self, name=..., superclass=..., abstract=..., metainstance=..., **kwargs
    ) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def allInstances(self=..., resources=...):  # -> Generator[Any, Any, None]:
        ...

    def notifyChanged(self, notif):  # -> None:
        ...

    def __repr__(self):  # -> str:
        ...

    @property
    def eAttributes(self):  # -> list[Any]:
        ...

    @property
    def eReferences(self):  # -> list[Any]:
        ...

    def findEStructuralFeature(self, name):  # -> None:
        ...

    def eAllSuperTypes(self):  # -> OrderedSet[Any]:
        ...

    def eAllGenericSuperTypes(self):  # -> OrderedSet[Any]:
        ...

    def eAllGenericSuperTypesClassifiers(self):  # -> OrderedSet[Any]:
        ...

    def eAllStructuralFeatures(self):  # -> OrderedSet[Any]:
        ...

    def eAllReferences(self):  # -> set[Any]:
        ...

    def eAllAttributes(self):  # -> set[Any]:
        ...

    def eAllOperations(self):  # -> OrderedSet[Any]:
        ...

    def findEOperation(self, name):  # -> None:
        ...

    def __instancecheck__(self, instance):  # -> bool:
        ...

    def __subclasscheck__(self, cls):  # -> bool:
        ...

def EMetaclass(cls):  # -> type[__class_MetaEClass]:
    """Class decorator for creating PyEcore metaclass."""
    ...

class EProxy(EObject):
    def __new__(cls, *args, **kwargs):  # -> Self:
        ...

    def __init__(self, path=..., resource=..., wrapped=..., **kwargs) -> None: ...
    def force_resolve(self):  # -> Any:
        ...

    def delete(self, recursive=...):  # -> None:
        ...

    def __getattribute__(self, name):  # -> Any:
        ...

    def __setattr__(self, name, value):  # -> None:
        ...

    def __instancecheck__(self, instance):  # -> Any:
        ...

    def __call__(self, *args, **kwargs):  # -> Any:
        ...

    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...

def abstract(cls): ...

EString = ...
EBoolean = ...
EBooleanObject = ...
EInteger = ...
EInt = ...
ELong = ...
ELongObject = ...
EIntegerObject = ...
EBigInteger = ...
EDouble = ...
EDoubleObject = ...
EFloat = ...
EFloatObject = ...
EStringToStringMapEntry = ...
EFeatureMapEntry = ...
EDiagnosticChain = ...
ENativeType = ...
EJavaObject = ...
EDate = ...
EBigDecimal = ...
EByte = ...
EByteObject = ...
EByteArray = ...
EChar = ...
ECharacterObject = ...
EShort = ...
EShortObject = ...
EJavaClass = ...
register_classifier = ...

def register_metaclass(c, metaclass=..., *args, **kwargs):  # -> None:
    ...

eClass = ...
eContents = ...
__all__ = [
    "EObject",
    "EModelElement",
    "ENamedElement",
    "EAnnotation",
    "EPackage",
    "EGenericType",
    "ETypeParameter",
    "ETypedElement",
    "EClassifier",
    "EDataType",
    "EEnum",
    "EEnumLiteral",
    "EParameter",
    "EOperation",
    "EClass",
    "EStructuralFeature",
    "EAttribute",
    "EReference",
    "EString",
    "EBoolean",
    "EInteger",
    "EStringToStringMapEntry",
    "EDiagnosticChain",
    "ENativeType",
    "EJavaObject",
    "abstract",
    "MetaEClass",
    "EList",
    "ECollection",
    "EOrderedSet",
    "ESet",
    "EcoreUtils",
    "BadValueError",
    "EDouble",
    "EDoubleObject",
    "EBigInteger",
    "EInt",
    "EIntegerObject",
    "EFloat",
    "EFloatObject",
    "ELong",
    "EProxy",
    "EBag",
    "EFeatureMapEntry",
    "EDate",
    "EBigDecimal",
    "EBooleanObject",
    "ELongObject",
    "EByte",
    "EByteObject",
    "EByteArray",
    "EChar",
    "ECharacterObject",
    "EShort",
    "EShortObject",
    "EJavaClass",
    "EMetaclass",
    "EDerivedCollection",
]
