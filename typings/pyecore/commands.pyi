"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from abc import abstractmethod
from collections import UserList

""" This module introduce the command system which allows to defined various
that can be executed onto a commands stack. Each command can also be 'undo' and
'redo'.
"""
class Command(metaclass=ABCMeta):
    """Provides the basic elements that must be implemented by a custom
    command.

    The methods/properties that need to be implemented are:
    * can_execute (@property)
    * can_undo (@property)
    * execute (method)
    * undo (method)
    * redo (method)
    """
    @property
    @abstractmethod
    def can_execute(self): # -> None:
        ...

    @abstractmethod
    def execute(self): # -> None:
        ...

    @property
    @abstractmethod
    def can_undo(self): # -> None:
        ...

    @abstractmethod
    def undo(self): # -> None:
        ...

    @abstractmethod
    def redo(self): # -> None:
        ...



class AbstractCommand(Command):
    def __init__(self, owner=..., feature=..., value=..., label=...) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    @property
    def can_undo(self): # -> bool:
        ...

    def execute(self): # -> None:
        ...

    def __repr__(self): # -> str:
        ...



class Set(AbstractCommand):
    def __init__(self, owner=..., feature=..., value=...) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def do_execute(self): # -> None:
        ...



class Add(AbstractCommand):
    def __init__(self, owner=..., feature=..., value=..., index=...) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    @property
    def can_undo(self): # -> bool:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def do_execute(self): # -> None:
        ...



class Remove(AbstractCommand):
    def __init__(self, owner=..., feature=..., value=..., index=...) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def do_execute(self): # -> None:
        ...



class Move(AbstractCommand):
    def __init__(self, owner=..., feature=..., from_index=..., to_index=..., value=...) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    @property
    def can_undo(self): # -> bool:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def do_execute(self): # -> None:
        ...



class Delete(AbstractCommand):
    def __init__(self, owner=...) -> None:
        ...

    @property
    def can_execute(self): # -> Literal[True]:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def do_execute(self): # -> None:
        ...

    def __repr__(self): # -> str:
        ...



class Compound(Command, UserList):
    def __init__(self, *commands) -> None:
        ...

    @property
    def can_execute(self): # -> bool:
        ...

    def execute(self): # -> None:
        ...

    @property
    def can_undo(self): # -> bool:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...

    def unwrap(self): # -> Self:
        ...

    def __repr__(self): # -> str:
        ...



class CommandStack:
    def __init__(self) -> None:
        ...

    @property
    def top(self):
        ...

    @property
    def peek_next_top(self):
        ...

    @top.setter
    def top(self, command): # -> None:
        ...

    @top.deleter
    def top(self): # -> None:
        ...

    def __bool__(self): # -> bool:
        ...

    def execute(self, *commands): # -> None:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...



class EditingDomain:
    def __init__(self, resource_set=..., command_stack_class=...) -> None:
        ...

    def create_resource(self, uri):
        ...

    def load_resource(self, uri):
        ...

    def execute(self, cmd): # -> None:
        ...

    def undo(self): # -> None:
        ...

    def redo(self): # -> None:
        ...
