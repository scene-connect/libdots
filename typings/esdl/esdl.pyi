"""
This type stub file was generated by pyright.
"""

from pyecore.ecore import *

"""
This type stub file was generated by pyright.
"""
name = ...
nsURI = ...
nsPrefix = ...
eClass = ...
eClassifiers = ...
getEClassifier = ...
CommodityEnum = ...
AreaScopeEnum = ...
ProfileTypeEnum = ...
DurationUnitEnum = ...
BuildingTypeEnum = ...
ConsTypeEnum = ...
SourceTypeEnum = ...
AggrTypeEnum = ...
AreaTypeEnum = ...
HeatDemandTypeEnum = ...
OwnershipRentalTypeEnum = ...
RoofTypeEnum = ...
EnergyLabelEnum = ...
ResidentialBuildingTypeEnum = ...
PowerPlantFuelEnum = ...
SectorEnum = ...
RenewableTypeEnum = ...
StateOfMatterEnum = ...
GeothermalSourceTypeEnum = ...
CHPTypeEnum = ...
GlazingTypeEnum = ...
VentilationTypeEnum = ...
GasHeaterTypeEnum = ...
InhabitantsTypeEnum = ...
AdditionalHeatingSourceTypeEnum = ...
GeothermalPotentialEnum = ...
GeothermalPowerEnum = ...
ResidualHeatSourceTypeEnum = ...
MobilityFuelTypeEnum = ...
VehicleTypeEnum = ...
MultiplierEnum = ...
PhysicalQuantityEnum = ...
UnitEnum = ...
TimeUnitEnum = ...
GasConversionTypeEnum = ...
PVInstallationTypeEnum = ...
WindTurbineTypeEnum = ...
WaterToPowerTypeEnum = ...
SolarCollectorTypeEnum = ...
HeatRadiationDeviceTypeEnum = ...
CoolingDeviceType = ...
RoomHeaterTypeEnum = ...
BiomassHeaterTypeEnum = ...
UTESPotentialTypeEnum = ...
UTESTypeEnum = ...
InterpolationMethodEnum = ...
PipeDiameterEnum = ...
AssetStateEnum = ...
QuantityAndUnitScopeEnum = ...
ValveTypeEnum = ...
CompoundTypeEnum = ...
CombinationFunctionEnum = ...
TransferFunctionTypeEnum = ...
MeasureTypeEnum = ...
BufferDistanceTypeEnum = ...
PowerPlantTypeEnum = ...
class EnergySystem(EObject, metaclass=MetaEClass):
    """This is the main class to describe an EnergySystem in ESDL. Each energy system description should start with this class. More information about ESDL and the Energy System can be found in the gitbook at https://energytransition.gitbook.io/esdl/"""
    name = ...
    description = ...
    geographicalScope = ...
    sector = ...
    id = ...
    version = ...
    esdlVersion = ...
    measures = ...
    instance = ...
    energySystemInformation = ...
    parties = ...
    services = ...
    templates = ...
    def __init__(self, *, name=..., description=..., geographicalScope=..., sector=..., measures=..., instance=..., energySystemInformation=..., parties=..., services=..., id=..., version=..., templates=..., esdlVersion=...) -> None:
        ...



class Area(EObject, metaclass=MetaEClass):
    """The Area class represents a physical geographic area or a more abstract logical area. In both cases it is the 'asset container', in a sense that all assets within the area are contained by the Area instance."""
    id = ...
    name = ...
    scope = ...
    type = ...
    geometryReference = ...
    buildingDensity = ...
    logicalGroup = ...
    socialProperties = ...
    economicProperties = ...
    asset = ...
    area = ...
    containingArea = ...
    isOwnedBy = ...
    mobilityProperties = ...
    KPIs = ...
    potential = ...
    geometry = ...
    measures = ...
    sector = ...
    def __init__(self, *, id=..., name=..., scope=..., type=..., socialProperties=..., economicProperties=..., asset=..., area=..., containingArea=..., isOwnedBy=..., geometryReference=..., mobilityProperties=..., buildingDensity=..., KPIs=..., potential=..., geometry=..., measures=..., sector=..., logicalGroup=...) -> None:
        ...



@abstract
class Port(EObject, metaclass=MetaEClass):
    """Ports allow connections between EnergyAssets. Ports can be connected to one or more other ports. There are two types of ports: InPort and OutPort, which defines the primary direction of positive energy flow. InPorts can only be connected to OutPorts and vice versa."""
    id = ...
    maxPower = ...
    simultaneousPower = ...
    name = ...
    energyasset = ...
    profile = ...
    carrier = ...
    constraint = ...
    def __init__(self, *, id=..., maxPower=..., energyasset=..., profile=..., carrier=..., simultaneousPower=..., name=..., constraint=...) -> None:
        ...



class EconomicProperties(EObject, metaclass=MetaEClass):
    """(experimental) Can be used to define the economic properties of an area"""
    averageIncome = ...
    averageWOZvalue = ...
    percentageOwnerOccupiedProperties = ...
    percentageHousingAssociation = ...
    percentagePrivateRental = ...
    def __init__(self, *, averageIncome=..., averageWOZvalue=..., percentageOwnerOccupiedProperties=..., percentageHousingAssociation=..., percentagePrivateRental=...) -> None:
        ...



class SocialProperties(EObject, metaclass=MetaEClass):
    """(experimental) Can be used to define the social properties of an area"""
    socialCohesion = ...
    populationDensity = ...
    numberOfInhabitants = ...
    def __init__(self, *, socialCohesion=..., populationDensity=..., numberOfInhabitants=...) -> None:
        ...



@abstract
class Item(EObject, metaclass=MetaEClass):
    """Class describing an abstract thing in an energy system. It is the parent of many other classes in ESDL, such as Assets, Services and Potentials. Parties can own Items"""
    id = ...
    name = ...
    shortName = ...
    description = ...
    originalIdInSource = ...
    isOwnedBy = ...
    dataSource = ...
    sector = ...
    def __init__(self, *, id=..., name=..., shortName=..., isOwnedBy=..., description=..., originalIdInSource=..., dataSource=..., sector=...) -> None:
        ...



class Instance(EObject, metaclass=MetaEClass):
    """Instances are used to represent different representations of the same EnergySystem. Most of the times only one Instance will be used. The primary use case for having more than one Instance is when you have different aggregations of the same EnergySystem in the same model (e.g. the same region on house level and aggregated on neighbourhood level). Another option would be to create different instances for different years (to describe the progress of the energy transition)."""
    id = ...
    name = ...
    description = ...
    detailLevel = ...
    aggrType = ...
    area = ...
    date = ...
    def __init__(self, *, id=..., name=..., description=..., detailLevel=..., aggrType=..., area=..., date=...) -> None:
        ...



class Carriers(EObject, metaclass=MetaEClass):
    """Collection of carriers as part of the Energy System Information. Both energy carriers and commodities."""
    id = ...
    name = ...
    description = ...
    carrier = ...
    dataSource = ...
    def __init__(self, *, carrier=..., dataSource=..., id=..., name=..., description=...) -> None:
        ...



class EnergySystemInformation(EObject, metaclass=MetaEClass):
    """Describes reusable information of the energy system, that other classes can refer to in this energy system, such as carriers, profiles, data sources, quantity and units."""
    id = ...
    carriers = ...
    profiles = ...
    dataSources = ...
    mobilityFuelInformation = ...
    quantityAndUnits = ...
    sectors = ...
    buildingUsageInformation = ...
    notes = ...
    matters = ...
    environmentalProfiles = ...
    def __init__(self, *, carriers=..., profiles=..., dataSources=..., mobilityFuelInformation=..., quantityAndUnits=..., sectors=..., id=..., buildingUsageInformation=..., notes=..., matters=..., environmentalProfiles=...) -> None:
        ...



@abstract
class GenericProfile(EObject, metaclass=MetaEClass):
    """All profiles should describe these fields: a name and a ProfileType. There are two different profile types: static, with static values stored in the ESDL model itself. And External, which allows you to refer to an externally defined profile (e.g. in an Energy Information System or a timeseries database)"""
    name = ...
    profileType = ...
    id = ...
    interpolationMethod = ...
    dataSource = ...
    profileQuantityAndUnit = ...
    def __init__(self, *, name=..., profileType=..., id=..., dataSource=..., profileQuantityAndUnit=..., interpolationMethod=...) -> None:
        ...

    def getProfile(self, from_=..., to=..., aggregationPrecision=...):
        ...

    def setProfile(self, profileElementList=...):
        ...



class ProfileElement(EObject, metaclass=MetaEClass):
    """ProfileElement describes a single profile element describing a range and a value which is valid for this range. From-field is inclusive, To-field is exclusive, allowing you to describe ranges such as 1-1-2017T00:00:00.000 to 1-1-2018T00:00:00.000 instead of 31-12-2017T23:59:59:999. The to-field may be ommitted, meaning this value is valid for all time after the specified to-datetime.
Examples: The heat demand of a municipality in 2013 is 20 PJ. The range you define is then from 1-1-2013T to 1-1-2014T and the value 20 and ProfileType ENERGY_IN_PJ"""
    from_ = ...
    to = ...
    value = ...
    def __init__(self, *, from_=..., to=..., value=...) -> None:
        ...



@abstract
class GenericDistribution(EObject, metaclass=MetaEClass):
    """Abstract class to represent different types of distributions"""
    name = ...
    def __init__(self, *, name=...) -> None:
        ...



class Percentile(EObject, metaclass=MetaEClass):
    """Defines the percentile of a percentile distribution"""
    percentile = ...
    value = ...
    def __init__(self, *, percentile=..., value=...) -> None:
        ...



class CostInformation(EObject, metaclass=MetaEClass):
    """Describes the costs to acquire, install and maintain a certain asset."""
    id = ...
    name = ...
    description = ...
    referenceYear = ...
    investmentCosts = ...
    installationCosts = ...
    fixedOperationalAndMaintenanceCosts = ...
    marginalCosts = ...
    variableOperationalAndMaintenanceCosts = ...
    discountRate = ...
    variableOperationalCosts = ...
    fixedMaintenanceCosts = ...
    fixedOperationalCosts = ...
    variableMaintenanceCosts = ...
    developmentCosts = ...
    decommissioningCosts = ...
    def __init__(self, *, investmentCosts=..., installationCosts=..., fixedOperationalAndMaintenanceCosts=..., marginalCosts=..., variableOperationalAndMaintenanceCosts=..., id=..., discountRate=..., variableOperationalCosts=..., fixedMaintenanceCosts=..., fixedOperationalCosts=..., variableMaintenanceCosts=..., developmentCosts=..., name=..., description=..., referenceYear=..., decommissioningCosts=...) -> None:
        ...



class StringItem(EObject, metaclass=MetaEClass):
    """Defines a label and a percentage, used in StringLabelDistribution"""
    label = ...
    value = ...
    def __init__(self, *, label=..., value=...) -> None:
        ...



class EnergyLabelBin(EObject, metaclass=MetaEClass):
    """Defines a bin for an energy label with a percentage, used in EnergyLabelDistribution"""
    energyLabel = ...
    percentage = ...
    def __init__(self, *, energyLabel=..., percentage=...) -> None:
        ...



@abstract
class FromToItem(EObject, metaclass=MetaEClass):
    """Defines a range and a percentage, used in the FromToDistribution class"""
    value = ...
    def __init__(self, *, value=...) -> None:
        ...



class PItemStat(EObject, metaclass=MetaEClass):
    """(experimental) Used to define statistical information"""
    value = ...
    sigma = ...
    def __init__(self, *, value=..., sigma=...) -> None:
        ...



@abstract
class AbstractVariance(EObject, metaclass=MetaEClass):
    """(experimental) Used to define statistical information"""
    def __init__(self) -> None:
        ...



class Party(EObject, metaclass=MetaEClass):
    """Defines a stakeholder in the energy system, to represent ownership"""
    id = ...
    name = ...
    shortName = ...
    owns = ...
    ownsArea = ...
    sector = ...
    def __init__(self, *, owns=..., id=..., name=..., shortName=..., ownsArea=..., sector=...) -> None:
        ...



@abstract
class Geometry(EObject, metaclass=MetaEClass):
    """Abstract class to define the shape/location of an asset or area. Parent class of e.g. Point, Line and Polygon"""
    CRS = ...
    def __init__(self, *, CRS=...) -> None:
        ...



@abstract
class Carrier(EObject, metaclass=MetaEClass):
    """Abstract class to define the carrier of energy, e.g. a energy carrier or a commodity (such as electricity)"""
    name = ...
    id = ...
    cost = ...
    dataSource = ...
    def __init__(self, *, name=..., id=..., cost=..., dataSource=...) -> None:
        ...



class Duration(EObject, metaclass=MetaEClass):
    """Defines the duration of a profile query"""
    value = ...
    durationUnit = ...
    def __init__(self, *, value=..., durationUnit=...) -> None:
        ...



class Profiles(EObject, metaclass=MetaEClass):
    """Container for profiles in the Energy System Information where other profiles can refer to"""
    id = ...
    name = ...
    description = ...
    profile = ...
    def __init__(self, *, profile=..., id=..., name=..., description=...) -> None:
        ...



class Parties(EObject, metaclass=MetaEClass):
    """Container for parties that have a role in the energy system"""
    party = ...
    def __init__(self, *, party=...) -> None:
        ...



class DataSources(EObject, metaclass=MetaEClass):
    """Collection of datasources used in the energy system"""
    id = ...
    name = ...
    description = ...
    dataSource = ...
    def __init__(self, *, dataSource=..., id=..., name=..., description=...) -> None:
        ...



class SubPolygon(EObject, metaclass=MetaEClass):
    """Part of a Polygon used to describe the internal or external boundary"""
    point = ...
    def __init__(self, *, point=...) -> None:
        ...



class MobilityFuelInformation(EObject, metaclass=MetaEClass):
    """Collection of information about vehicles, fuels and efficiency"""
    id = ...
    name = ...
    description = ...
    vehicleFuelEfficiency = ...
    dataSource = ...
    def __init__(self, *, vehicleFuelEfficiency=..., dataSource=..., id=..., name=..., description=...) -> None:
        ...



class VehicleFuelEfficiency(EObject, metaclass=MetaEClass):
    """Information about vehicles, fuels and efficiency, used in MobilityFuelInformation"""
    vehicleType = ...
    fuel = ...
    efficiency = ...
    def __init__(self, *, vehicleType=..., fuel=..., efficiency=...) -> None:
        ...



class MobilityProperties(EObject, metaclass=MetaEClass):
    """(experimental) Can be used to define the mobility properties of an area"""
    numberOfVehicles = ...
    def __init__(self, *, numberOfVehicles=...) -> None:
        ...



class NumberOfVehicles(EObject, metaclass=MetaEClass):
    """(experimental) Provides the ability to define the number of vehicles of an area"""
    vehicleCount = ...
    def __init__(self, *, vehicleCount=...) -> None:
        ...



class VehicleCount(EObject, metaclass=MetaEClass):
    """(experimental) Defines the number of vehicles per vehicle type"""
    type = ...
    count = ...
    def __init__(self, *, type=..., count=...) -> None:
        ...



class Services(EObject, metaclass=MetaEClass):
    """Defines a collection of logical services used in the energy system, e.g. Demand-Response, Aggregator services, Energy markets and control strategies."""
    id = ...
    name = ...
    description = ...
    service = ...
    def __init__(self, *, service=..., id=..., name=..., description=...) -> None:
        ...



@abstract
class AbstractDataSource(EObject, metaclass=MetaEClass):
    """Abstract class to describe data sources or references to data sources"""
    id = ...
    def __init__(self, *, id=...) -> None:
        ...



class KPIs(EObject, metaclass=MetaEClass):
    """Collection of key performance indicators of areas or assets"""
    id = ...
    description = ...
    kpi = ...
    def __init__(self, *, kpi=..., id=..., description=...) -> None:
        ...



@abstract
class KPI(EObject, metaclass=MetaEClass):
    """Defines a key performance indicator (KPI)"""
    id = ...
    name = ...
    description = ...
    quantityAndUnit = ...
    kpi = ...
    sector = ...
    carrier = ...
    matter = ...
    def __init__(self, *, id=..., name=..., quantityAndUnit=..., kpi=..., description=..., sector=..., carrier=..., matter=...) -> None:
        ...



class QuantityAndUnits(EObject, metaclass=MetaEClass):
    """Collection of QuantityAndUnitTypes defined in the EnergySystemInformation section"""
    id = ...
    name = ...
    description = ...
    quantityAndUnit = ...
    def __init__(self, *, quantityAndUnit=..., id=..., name=..., description=...) -> None:
        ...



@abstract
class AbstractQuantityAndUnit(EObject, metaclass=MetaEClass):
    """Abstract class to describe QuantityAndUnitTypes or references to these"""
    def __init__(self) -> None:
        ...



@abstract
class Parameters(EObject, metaclass=MetaEClass):
    """Used to describe properties of an EnergyMarket"""
    name = ...
    parameterUnit = ...
    def __init__(self, *, name=..., parameterUnit=...) -> None:
        ...



class Sectors(EObject, metaclass=MetaEClass):
    """Collection of sectors. Both Party and Item can link to a sector"""
    id = ...
    name = ...
    description = ...
    sector = ...
    dataSource = ...
    def __init__(self, *, sector=..., dataSource=..., id=..., name=..., description=...) -> None:
        ...



class Sector(EObject, metaclass=MetaEClass):
    """Defines a sector. Can be used for the Standaard Bedrijfsindeling (SBI) of the CBS in the Netherlands"""
    id = ...
    name = ...
    description = ...
    code = ...
    dataSource = ...
    sector = ...
    def __init__(self, *, id=..., name=..., description=..., dataSource=..., code=..., sector=...) -> None:
        ...



@abstract
class AbstractInstanceDate(EObject, metaclass=MetaEClass):
    """Abstract class to define the date or period of the validity of the data that is used in this instance """
    def __init__(self) -> None:
        ...



class WeekSchedule(EObject, metaclass=MetaEClass):
    """Specifies a week schedule for building usage"""
    mon = ...
    tue = ...
    wed = ...
    thu = ...
    fri = ...
    sat = ...
    sun = ...
    weekdays = ...
    weekenddays = ...
    def __init__(self, *, mon=..., tue=..., wed=..., thu=..., fri=..., sat=..., sun=..., weekdays=..., weekenddays=...) -> None:
        ...



class DaySchedule(EObject, metaclass=MetaEClass):
    """Specifies a day schedule as part of a week schedule. A day schedule is a collection of events with a timestamp"""
    event = ...
    def __init__(self, *, event=...) -> None:
        ...



class Event(EObject, metaclass=MetaEClass):
    """Event with a timestamp"""
    id = ...
    time = ...
    description = ...
    value = ...
    def __init__(self, *, id=..., time=..., description=..., value=...) -> None:
        ...



@abstract
class AbstractBuildingUsage(EObject, metaclass=MetaEClass):
    """Abstract class to support references to building usages"""
    def __init__(self) -> None:
        ...



class BuildingUsageInformation(EObject, metaclass=MetaEClass):
    """Part of Energy System Information that specifies generic building usage information that can be referenced from multiple individual buildings"""
    id = ...
    name = ...
    description = ...
    buildingUsage = ...
    def __init__(self, *, buildingUsage=..., id=..., name=..., description=...) -> None:
        ...



class BuildingTypeBin(EObject, metaclass=MetaEClass):
    """Defines a bin for a building type with a percentage, used in BuildingTypeDistribution """
    buildingType = ...
    percentage = ...
    def __init__(self, *, buildingType=..., percentage=...) -> None:
        ...



class ResidentialBuildingTypeBin(EObject, metaclass=MetaEClass):
    """Defines a bin for a residential building type with a percentage, used in ResidentialBuildingTypeDistribution """
    residentialBuildingType = ...
    percentage = ...
    def __init__(self, *, residentialBuildingType=..., percentage=...) -> None:
        ...



class OwnershipRentalTypeBin(EObject, metaclass=MetaEClass):
    """Defines a bin for a ownership/rental type with a percentage, used in OwnershipRentalTypeDistribution """
    ownershipRentalType = ...
    percentage = ...
    def __init__(self, *, ownershipRentalType=..., percentage=...) -> None:
        ...



class CompoundMatterComponent(EObject, metaclass=MetaEClass):
    """One of the components of a CompoundMatter instance"""
    mixFraction = ...
    layerWidth = ...
    matter = ...
    def __init__(self, *, mixFraction=..., matter=..., layerWidth=...) -> None:
        ...



class IntTargetKPI(EObject, metaclass=MetaEClass):
    value = ...
    year = ...
    def __init__(self, *, value=..., year=...) -> None:
        ...



class DoubleTargetKPI(EObject, metaclass=MetaEClass):
    value = ...
    year = ...
    def __init__(self, *, value=..., year=...) -> None:
        ...



class StringTargetKPI(EObject, metaclass=MetaEClass):
    value = ...
    year = ...
    def __init__(self, *, value=..., year=...) -> None:
        ...



class Templates(EObject, metaclass=MetaEClass):
    """Collection of templates, e.g. asset templates.
"""
    id = ...
    name = ...
    description = ...
    assetTemplate = ...
    def __init__(self, *, assetTemplate=..., id=..., name=..., description=...) -> None:
        ...



class Address(EObject, metaclass=MetaEClass):
    """The address of a building or building unit."""
    streetName = ...
    houseNumber = ...
    houseNumberLetter = ...
    houseNumberAnnex = ...
    postalCode = ...
    city = ...
    stateOrProvince = ...
    country = ...
    def __init__(self, *, streetName=..., houseNumber=..., houseNumberLetter=..., houseNumberAnnex=..., postalCode=..., city=..., stateOrProvince=..., country=...) -> None:
        ...



class LabelJump(EObject, metaclass=MetaEClass):
    fromLabel = ...
    toLabel = ...
    savings = ...
    def __init__(self, *, fromLabel=..., toLabel=..., savings=...) -> None:
        ...



@abstract
class BuildingInformation(EObject, metaclass=MetaEClass):
    """Super class of all different kinds of extra information that can be specified for a building"""
    def __init__(self) -> None:
        ...



class Table(EObject, metaclass=MetaEClass):
    """Table class that represents data in a table structure. Current examples are the pump curve table and a table describing the flowCoefficient of a checkvalve (relation between pressure drop and flow rate)"""
    name = ...
    description = ...
    row = ...
    header = ...
    datasource = ...
    def __init__(self, *, row=..., header=..., name=..., description=..., datasource=...) -> None:
        ...



class TableRow(EObject, metaclass=MetaEClass):
    value = ...
    def __init__(self, *, value=...) -> None:
        ...



class Notes(EObject, metaclass=MetaEClass):
    """Collection of notes that can be added to the map, like postits (with comments in HTML)"""
    id = ...
    name = ...
    description = ...
    note = ...
    def __init__(self, *, note=..., id=..., name=..., description=...) -> None:
        ...



class Note(EObject, metaclass=MetaEClass):
    """An individual note that can have a location on the map, to document certain decisions"""
    id = ...
    title = ...
    author = ...
    text = ...
    date = ...
    mapLocation = ...
    def __init__(self, *, id=..., mapLocation=..., title=..., author=..., text=..., date=...) -> None:
        ...



class Matters(EObject, metaclass=MetaEClass):
    id = ...
    name = ...
    description = ...
    dataSource = ...
    matter = ...
    def __init__(self, *, id=..., dataSource=..., matter=..., name=..., description=...) -> None:
        ...



class EnvironmentalProfiles(EObject, metaclass=MetaEClass):
    id = ...
    name = ...
    description = ...
    outsideTemperatureProfile = ...
    solarIrradianceProfile = ...
    windSpeedProfile = ...
    windDirectionProfile = ...
    soilTemperatureProfile = ...
    relativeHumidityProfile = ...
    def __init__(self, *, outsideTemperatureProfile=..., solarIrradianceProfile=..., windSpeedProfile=..., windDirectionProfile=..., soilTemperatureProfile=..., relativeHumidityProfile=..., id=..., name=..., description=...) -> None:
        ...



@abstract
class AbstractBehaviour(EObject, metaclass=MetaEClass):
    """Abstract class for specification of the (dynamic) behaviour of an asset"""
    id = ...
    name = ...
    def __init__(self, *, id=..., name=...) -> None:
        ...



class PortRelation(EObject, metaclass=MetaEClass):
    """Specifies the relation between a port and the main port using a specific ratio."""
    ratio = ...
    port = ...
    quantityAndUnit = ...
    def __init__(self, *, ratio=..., port=..., quantityAndUnit=...) -> None:
        ...



class BufferDistance(EObject, metaclass=MetaEClass):
    """Buffer distance around an asset that relates to risks, environment, noise, CO2, ..."""
    type = ...
    distance = ...
    def __init__(self, *, type=..., distance=...) -> None:
        ...



class InPort(Port):
    """Represents a port with a positive energy direction into the asset, e.g. for a Consumer. See Port for more details"""
    connectedTo = ...
    def __init__(self, *, connectedTo=..., **kwargs) -> None:
        ...



class OutPort(Port):
    """Represents a port with a positive energy direction out of the asset, e.g. for a Producer. See Port for more details"""
    connectedTo = ...
    def __init__(self, *, connectedTo=..., **kwargs) -> None:
        ...



@abstract
class Asset(Item):
    """Assets are all physical thing in the EnergySystem. Assets can have a location, a geometry, commissioning and decommissioning dates, cost information (investment, installation and operation and maintenance costs)."""
    surfaceArea = ...
    commissioningDate = ...
    decommissioningDate = ...
    owner = ...
    technicalLifetime = ...
    aggregated = ...
    aggregationCount = ...
    installationDuration = ...
    assetType = ...
    state = ...
    manufacturer = ...
    area = ...
    containingBuilding = ...
    geometry = ...
    costInformation = ...
    KPIs = ...
    material = ...
    bufferDistance = ...
    constraint = ...
    containingAsset = ...
    def __init__(self, *, surfaceArea=..., commissioningDate=..., decommissioningDate=..., owner=..., area=..., containingBuilding=..., geometry=..., costInformation=..., technicalLifetime=..., aggregated=..., aggregationCount=..., installationDuration=..., KPIs=..., assetType=..., state=..., material=..., manufacturer=..., bufferDistance=..., constraint=..., containingAsset=..., **kwargs) -> None:
        ...



class Point(Geometry):
    """Describes a point geometry, which can be used for giving assets a location on a map"""
    lat = ...
    lon = ...
    elevation = ...
    def __init__(self, *, lat=..., lon=..., elevation=..., **kwargs) -> None:
        ...



class Polygon(Geometry):
    """Describes a polygon geometry, which can be used for defining the shape of an area or building"""
    exterior = ...
    interior = ...
    def __init__(self, *, exterior=..., interior=..., **kwargs) -> None:
        ...



class Measures(Item):
    """Collection of measures that can be applied to an energy system"""
    measure = ...
    def __init__(self, *, measure=..., **kwargs) -> None:
        ...



@abstract
class Service(Item):
    """Abstract class to represent logical entities in the energy system, e.g. demand response services, energy markets, etc."""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class Potential(Item):
    """Abstract class that represents energy potentials in an area, like wind potential, geothermal potential, residual heat source potential, etc."""
    geometryReference = ...
    aggregated = ...
    aggregationCount = ...
    geometry = ...
    quantityAndUnit = ...
    def __init__(self, *, geometry=..., geometryReference=..., quantityAndUnit=..., aggregated=..., aggregationCount=..., **kwargs) -> None:
        ...



class EnergyCarrier(Carrier):
    """Defines a carrier of energy with its emission and energy content properties"""
    energyContent = ...
    emission = ...
    energyCarrierType = ...
    stateOfMatter = ...
    energyContentUnit = ...
    emissionUnit = ...
    composition = ...
    def __init__(self, *, energyContent=..., emission=..., energyCarrierType=..., energyContentUnit=..., emissionUnit=..., composition=..., stateOfMatter=..., **kwargs) -> None:
        ...



@abstract
class StaticProfile(GenericProfile):
    """Stores the profile in the ESDL model itself, in contrast with an external profile, which refers to an external source for a profile"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class ExternalProfile(GenericProfile):
    """ExternalProfile allows to refer to an externally defined profile. Common uses are a profile defined in a (timeseries) database such as InfluxDB.
It allows you to specify a multiplier to scale the supplied external profile by a certain factor (e.g. when using NEDU profiles). Default the multiplier is '1'."""
    multiplier = ...
    startDate = ...
    endDate = ...
    def __init__(self, *, multiplier=..., startDate=..., endDate=..., **kwargs) -> None:
        ...



class PercentileDistribution(GenericDistribution):
    """Defines a distribution in terms of percentiles"""
    percentile = ...
    def __init__(self, *, percentile=..., **kwargs) -> None:
        ...



@abstract
class SpecificLabelDistribution(GenericDistribution):
    """Abstract class to define a distribution with labels"""
    def __init__(self, **kwargs) -> None:
        ...



class SymmetricVariance(AbstractVariance):
    """(experimental) Used to define statistical information"""
    sigma = ...
    def __init__(self, *, sigma=..., **kwargs) -> None:
        ...



class AssymmetricVariance(AbstractVariance):
    """(experimental) Used to define statistical information"""
    sigmaMin = ...
    sigmaPlus = ...
    def __init__(self, *, sigmaMin=..., sigmaPlus=..., **kwargs) -> None:
        ...



class DoubleAssymmetricVariance(AbstractVariance):
    """(experimental) Used to define statistical information"""
    plus34perc = ...
    plus48perc = ...
    min34perc = ...
    min48perc = ...
    def __init__(self, *, plus34perc=..., plus48perc=..., min34perc=..., min48perc=..., **kwargs) -> None:
        ...



class Line(Geometry):
    """Describes a line geometry based on a list of points, which can be used to define the shape of pipes and cables"""
    point = ...
    def __init__(self, *, point=..., **kwargs) -> None:
        ...



@abstract
class Commodity(Carrier):
    """Abstract class for commodities"""
    emission = ...
    renewableFactor = ...
    emissionUnit = ...
    def __init__(self, *, emission=..., renewableFactor=..., emissionUnit=..., **kwargs) -> None:
        ...



class DataSource(AbstractDataSource):
    """A DataSource describes the source of the piece of information used in the energy system. E.g. a profile from NEDU or typical parameters of an Asset"""
    name = ...
    description = ...
    reference = ...
    attribution = ...
    releaseDate = ...
    version = ...
    license = ...
    author = ...
    contactDetails = ...
    def __init__(self, *, name=..., description=..., reference=..., attribution=..., releaseDate=..., version=..., license=..., author=..., contactDetails=..., **kwargs) -> None:
        ...



class MultiPolygon(Geometry):
    """Collection of Polygons"""
    polygon = ...
    def __init__(self, *, polygon=..., **kwargs) -> None:
        ...



class QuantityAndUnitType(AbstractQuantityAndUnit):
    """Defines the quantity and its unit for a specific parameter. Used in e.g. profiles and KPIs. For example Energy in Joules or CO2 emission in kton."""
    physicalQuantity = ...
    multiplier = ...
    unit = ...
    perMultiplier = ...
    perUnit = ...
    description = ...
    perTimeUnit = ...
    id = ...
    perScope = ...
    def __init__(self, *, physicalQuantity=..., multiplier=..., unit=..., perMultiplier=..., perUnit=..., description=..., perTimeUnit=..., id=..., perScope=..., **kwargs) -> None:
        ...



class DataSourceReference(AbstractDataSource):
    """Defines a reference to a datasource, defined in the collection of DataSources (as part of the EnergySystemInformation)"""
    reference = ...
    def __init__(self, *, reference=..., **kwargs) -> None:
        ...



class QuantityAndUnitReference(AbstractQuantityAndUnit):
    """Defines a reference to a QuantityAndUnitType defined in the collection of QuantityAndUnits (as part of the EnergySystemInformation)"""
    reference = ...
    def __init__(self, *, reference=..., **kwargs) -> None:
        ...



class StringParameter(Parameters):
    """Defines a parameter of type String"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class DoubleParameter(Parameters):
    """Defines a parameter of type Double"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class IntegerParameter(Parameters):
    """Defines a parameter of type Integer"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class BooleanParameter(Parameters):
    """Defines a parameter of type Boolean"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class MultiLine(Geometry):
    """Defines a collection of lines"""
    line = ...
    def __init__(self, *, line=..., **kwargs) -> None:
        ...



class InstanceDate(AbstractInstanceDate):
    """Describes the date of the validity of the data that is used in this instance """
    date = ...
    def __init__(self, *, date=..., **kwargs) -> None:
        ...



class InstancePeriod(AbstractInstanceDate):
    """Describes the period of the validity of the data that is used in this instance """
    fromDate = ...
    toDate = ...
    def __init__(self, *, fromDate=..., toDate=..., **kwargs) -> None:
        ...



class WKT(Geometry):
    """Well-Known Text (see https://en.wikipedia.org/wiki/Well-known_text)"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class WKB(Geometry):
    """Well-Known Binary (See https://en.wikipedia.org/wiki/Well-known_text#Well-known_binary)"""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class BuildingUsage(AbstractBuildingUsage):
    """Collection of information about the usage of a building, such as temperature set points and opening hours."""
    id = ...
    name = ...
    coolingSetpoints = ...
    heatingSetpoints = ...
    openingHours = ...
    def __init__(self, *, id=..., name=..., coolingSetpoints=..., heatingSetpoints=..., openingHours=..., **kwargs) -> None:
        ...



class BuildingUsageReference(AbstractBuildingUsage):
    """Specifies a reference to building usage (such as opening hours)"""
    reference = ...
    def __init__(self, *, reference=..., **kwargs) -> None:
        ...



class DoubleKPI(KPI):
    """Specifies a KPI value as a double"""
    value = ...
    target = ...
    def __init__(self, *, value=..., target=..., **kwargs) -> None:
        ...



class StringKPI(KPI):
    """Specifies a KPI value as a string"""
    value = ...
    target = ...
    def __init__(self, *, value=..., target=..., **kwargs) -> None:
        ...



class IntKPI(KPI):
    """Specifies a KPI value as an integer"""
    value = ...
    target = ...
    def __init__(self, *, value=..., target=..., **kwargs) -> None:
        ...



class FromToIntItem(FromToItem):
    """Specifies a percentage range as an integer value, as part of a distribution, e.g. for defining a period of years (1945-1960) in Aggregated Buildings"""
    from_ = ...
    to = ...
    def __init__(self, *, from_=..., to=..., **kwargs) -> None:
        ...



class FromToDoubleItem(FromToItem):
    """Specifies a percentage range as an double value, as part of a distribution, e.g. for defining energy usage (2.5-5.0 GJ of hot tap water) in Aggregated Buildings"""
    from_ = ...
    to = ...
    def __init__(self, *, from_=..., to=..., **kwargs) -> None:
        ...



@abstract
class Restriction(Item):
    """Allows to specify restrictions to measures"""
    def __init__(self, **kwargs) -> None:
        ...



class AssetTemplate(Item):
    """Template for an asset. Can be used to specify a generic asset type where specific instances can refer to and inherit properties of.
"""
    asset = ...
    def __init__(self, *, asset=..., **kwargs) -> None:
        ...



@abstract
class GenericLabelDistribution(GenericDistribution):
    def __init__(self, **kwargs) -> None:
        ...



class DistributionKPI(KPI):
    distribution = ...
    def __init__(self, *, distribution=..., **kwargs) -> None:
        ...



@abstract
class AbstractMeasure(Item):
    def __init__(self, **kwargs) -> None:
        ...



class ResidentialBuildingInformation(BuildingInformation):
    """Class that contains extra information that can be specified for a residential building"""
    numberOfInhabitants = ...
    inhabitantsType = ...
    residentialBuildingType = ...
    ownershipRentalType = ...
    def __init__(self, *, numberOfInhabitants=..., inhabitantsType=..., residentialBuildingType=..., ownershipRentalType=..., **kwargs) -> None:
        ...



class BuildingStructureInformation(BuildingInformation):
    slantedRoofArea = ...
    wallArea = ...
    roofType = ...
    flatRoofArea = ...
    windowArea = ...
    glassType = ...
    height = ...
    orientation = ...
    rcWall = ...
    rcRoof = ...
    ventilationType = ...
    rcFloor = ...
    uWindow = ...
    perimeter = ...
    doorArea = ...
    uDoor = ...
    def __init__(self, *, slantedRoofArea=..., wallArea=..., roofType=..., flatRoofArea=..., windowArea=..., glassType=..., height=..., orientation=..., rcWall=..., rcRoof=..., ventilationType=..., rcFloor=..., uWindow=..., perimeter=..., doorArea=..., uDoor=..., **kwargs) -> None:
        ...



@abstract
class AbstractMatter(Carrier):
    """Abstract class for describing Matters, can be instantiated as a subclass of Matter or as a MatterReference."""
    def __init__(self, **kwargs) -> None:
        ...



class InputOutputRelation(AbstractBehaviour):
    """Describes the relation between one of the ports of an asset (the mainPort) and all other ports using a specific ratio. Can be used for conversion assets to specify how much of the carrier on the InPorts is required to produce an x amount of the carrier on the OutPort. """
    mainPortRelation = ...
    mainPort = ...
    mainPortQuantityAndUnit = ...
    def __init__(self, *, mainPortRelation=..., mainPort=..., mainPortQuantityAndUnit=..., **kwargs) -> None:
        ...



@abstract
class AbstractTransferFunction(AbstractBehaviour):
    """Abstract class for a TransferFunction for the specification of the behaviour of an asset"""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



@abstract
class Constraint(Item):
    """Allows to specify constraints for asset attributes."""
    attributeReference = ...
    def __init__(self, *, attributeReference=..., **kwargs) -> None:
        ...



class DataSourceList(AbstractDataSource):
    name = ...
    description = ...
    dataSource = ...
    def __init__(self, *, dataSource=..., name=..., description=..., **kwargs) -> None:
        ...



class InstanceYear(AbstractInstanceDate):
    """Describes the year of the validity of the data that is used in this instance """
    year = ...
    def __init__(self, *, year=..., **kwargs) -> None:
        ...



class Insulation(Asset):
    """Describes insulation that can be added to a building. The relation with the heat consumption is not defined and requires manual modelling"""
    thermalInsulation = ...
    def __init__(self, *, thermalInsulation=..., **kwargs) -> None:
        ...



class LegalArea(Potential):
    """Used to define an area in which its purpose is defined by legal authorities, such as restricted areas. E.g. in areas where water is extracted, it is not allowed to plan new UTES."""
    purpose = ...
    def __init__(self, *, purpose=..., **kwargs) -> None:
        ...



@abstract
class EnergyService(Service):
    """Abstract class to represent logical entities in the energy system, e.g. demand response services, energy markets, etc."""
    def __init__(self, **kwargs) -> None:
        ...



class WindPotential(Potential):
    """Defines the potential for wind energy. This class can be used instead of 'SearchAreaWind' in case there is more information available."""
    value = ...
    fullLoadHours = ...
    area = ...
    height = ...
    def __init__(self, *, value=..., fullLoadHours=..., area=..., height=..., **kwargs) -> None:
        ...



class DateTimeProfile(StaticProfile):
    """Describes a profile using one or more Profile elements. Each element defines a from- and a to-datetime and a value which is valid for this range. The to-field may be ommitted, meaning this value is valid for all time after the to-date."""
    element = ...
    def __init__(self, *, element=..., **kwargs) -> None:
        ...



class SingleValue(StaticProfile):
    """A profile used to define a single value. This should be used when no information is present about the time. E.g. the price of a PV panel as currently known
When a model queries for a value from a certain date (and to a certain date), that information will be ignored and it will always return this value."""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class StringLabelDistribution(GenericLabelDistribution):
    """Defines a distribution in terms of self-defined labels"""
    stringItem = ...
    def __init__(self, *, stringItem=..., **kwargs) -> None:
        ...



class EnergyLabelDistribution(SpecificLabelDistribution):
    """Defines a distribution in terms of energy labels"""
    bin = ...
    def __init__(self, *, bin=..., **kwargs) -> None:
        ...



class FromToDistribution(GenericLabelDistribution):
    """Defines a distribution in terms of 'from' and 'to'"""
    fromToItem = ...
    def __init__(self, *, fromToItem=..., **kwargs) -> None:
        ...



class URIProfile(ExternalProfile):
    """Describes a reference to a profile in an information system using a URI (e.g. a URI to a profile in Energy Information System (EIS))"""
    URI = ...
    def __init__(self, *, URI=..., **kwargs) -> None:
        ...



@abstract
class DatabaseProfile(ExternalProfile):
    """Describes the fields of a generic database-based profile"""
    host = ...
    port = ...
    database = ...
    filters = ...
    def __init__(self, *, host=..., port=..., database=..., filters=..., **kwargs) -> None:
        ...



class GasCommodity(Commodity):
    """Defines a gas commodity. This class can be used as an abstract way of modelling gas commodity and can be used in conjunction with electricity commodity and heat commodity. If more detailed modelling is necessary, use energy carriers."""
    pressure = ...
    def __init__(self, *, pressure=..., **kwargs) -> None:
        ...



class HeatCommodity(Commodity):
    """Defines a heat commodity"""
    supplyTemperature = ...
    returnTemperature = ...
    def __init__(self, *, supplyTemperature=..., returnTemperature=..., **kwargs) -> None:
        ...



class ElectricityCommodity(Commodity):
    """Defines an electricity commodity"""
    voltage = ...
    def __init__(self, *, voltage=..., **kwargs) -> None:
        ...



class Range(StaticProfile):
    """Defines a range between two values. Optionally a mid value can be specified as for example a mean value or most plausible value."""
    minValue = ...
    maxValue = ...
    midValue = ...
    def __init__(self, *, minValue=..., maxValue=..., midValue=..., **kwargs) -> None:
        ...



class SolarPotential(Potential):
    """Defines the potential for solar energy. This class can be used instead of 'SearchAreaSolar' in case there is more information available."""
    value = ...
    solarPotentialType = ...
    fullLoadHours = ...
    area = ...
    angle = ...
    orientation = ...
    def __init__(self, *, value=..., solarPotentialType=..., fullLoadHours=..., area=..., angle=..., orientation=..., **kwargs) -> None:
        ...



class ProfileReference(StaticProfile):
    """Used to refer to profiles defined in the Energy System Information section"""
    multiplier = ...
    reference = ...
    def __init__(self, *, multiplier=..., reference=..., **kwargs) -> None:
        ...



class ResidualHeatSourcePotential(Potential):
    """Defines the residual heat potential in a specific area."""
    value = ...
    type = ...
    associatedConversionAsset = ...
    residualHeatSource = ...
    def __init__(self, *, value=..., type=..., associatedConversionAsset=..., residualHeatSource=..., **kwargs) -> None:
        ...



class EnergyCommodity(Commodity):
    """Generic energy commodity, to be used in (national) energy balances (when the type of energy is not important)"""
    def __init__(self, **kwargs) -> None:
        ...



class Measure(AbstractMeasure):
    """A single measure or a combination of measures with collective cost information that can be applied to an energy system. An example of a measure-combination would be a combination of insulation and a heat pump."""
    type = ...
    asset = ...
    costInformation = ...
    restriction = ...
    labelJump = ...
    def __init__(self, *, asset=..., costInformation=..., restriction=..., labelJump=..., type=..., **kwargs) -> None:
        ...



@abstract
class AbstractGTPotential(Potential):
    """Abstract class to describe geothermal potential"""
    geothermalSource = ...
    def __init__(self, *, geothermalSource=..., **kwargs) -> None:
        ...



class UTESPotential(Potential):
    """Defines the potential for underground thermal energy storage (UTES). E.g. ATES or BTES potential"""
    value = ...
    type = ...
    UTES = ...
    def __init__(self, *, value=..., type=..., UTES=..., **kwargs) -> None:
        ...



class BiomassPotential(Potential):
    """Defines the biomass potential in a specific area."""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class Glazing(Asset):
    """Allows to specify the glass of a building, e.g. for calculating heat loss"""
    uWindow = ...
    glazingType = ...
    def __init__(self, *, uWindow=..., glazingType=..., **kwargs) -> None:
        ...



class SearchAreaWind(Potential):
    """Specifies search areas for wind turbines. Search areas are a kind of 'legal' areas that have been appointed by the (local) government as possible areas for wind installations. Further research should give insight in the real potential (in terms of energy)."""
    fullLoadHours = ...
    area = ...
    height = ...
    def __init__(self, *, fullLoadHours=..., area=..., height=..., **kwargs) -> None:
        ...



class SearchAreaSolar(Potential):
    """Specifies search areas for solar installations. Search areas are a kind of 'legal' areas that have been appointed by the (local) government as possible areas for solar installations. Further research should give insight in the real potential (in terms of energy)."""
    fullLoadHours = ...
    area = ...
    def __init__(self, *, fullLoadHours=..., area=..., **kwargs) -> None:
        ...



class BuildingTypeDistribution(SpecificLabelDistribution):
    """Specifies the way the building type is distributed in this area (e.g. Utility, Residential), specifing the percentage of buildings per type."""
    bin = ...
    def __init__(self, *, bin=..., **kwargs) -> None:
        ...



class ResidentialBuildingTypeDistribution(SpecificLabelDistribution):
    """Specifies the way the residential building type is distributed in this area (e.g. Vrijstaande Woning, Hoekwoning, Flatwoning), specifing the percentage of buildings per residential type."""
    bin = ...
    def __init__(self, *, bin=..., **kwargs) -> None:
        ...



class OwnershipRentalTypeDistribution(SpecificLabelDistribution):
    """Specifies the way the housing type is distributed in this area (e.g. Owner occupied, Housing Association, Private Rental), specifing the percentage of buildings per housing type."""
    bin = ...
    def __init__(self, *, bin=..., **kwargs) -> None:
        ...



@abstract
class Matter(AbstractMatter):
    """Abstract class for describing matters. There are three subclasses:

- Material: for the materials of which Assets are made, but also for raw materials (e.g. water as an input for an electrolyzer)
- Fuels: for decomposing EnergyCarriers
- CompoundMatter for creating a mixture or a collection of Materials or Fuels"""
    density = ...
    stateOfMatter = ...
    def __init__(self, *, density=..., stateOfMatter=..., **kwargs) -> None:
        ...



class BuildingTypeRestriction(Restriction):
    """Defines a restriction on the type of building (the purpose for which the building is used)."""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class AreaTypeRestriction(Restriction):
    """Defines a restriction on the type of area (road, railway, built, water, ...)"""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class TemplatedAsset(Asset):
    """An instantiated asset that is referring to an asset template and the specific asset. The asset template contains generic information, the specific asset contains specific information about this instance (e.g. geometry)."""
    asset = ...
    template = ...
    def __init__(self, *, asset=..., template=..., **kwargs) -> None:
        ...



class MinimumLabelRestriction(Restriction):
    """Defines a restriction on the minimum label required. Allows to specify for example to only apply a heatpump in a house with energy label B or better."""
    label = ...
    def __init__(self, *, label=..., **kwargs) -> None:
        ...



class MeasureReference(AbstractMeasure):
    reference = ...
    def __init__(self, *, reference=..., **kwargs) -> None:
        ...



class InitialValue(StaticProfile):
    """Can be used to explicitely set an initial value of a certain parameter. Used as input for simulation models that calculate this parameter over time, but need a value to initialize the model."""
    value = ...
    def __init__(self, *, value=..., **kwargs) -> None:
        ...



class MatterReference(AbstractMatter):
    """can be used to refer to a Matter from the collection of Matters (part of EnergySystemInformation)"""
    reference = ...
    def __init__(self, *, reference=..., **kwargs) -> None:
        ...



class GenericTransferFunction(AbstractTransferFunction):
    """Generic transfer function with numerator and denominator"""
    numerator = ...
    denominator = ...
    def __init__(self, *, numerator=..., denominator=..., **kwargs) -> None:
        ...



class DelayTransferFunction(AbstractTransferFunction):
    """Delay transfer function with a time constant"""
    timeConstant = ...
    def __init__(self, *, timeConstant=..., **kwargs) -> None:
        ...



class CombinedTransferFunction(AbstractTransferFunction):
    """Combination of multiple transfer functions by addition of multiplication of individual components"""
    combinationFunction = ...
    component = ...
    def __init__(self, *, component=..., combinationFunction=..., **kwargs) -> None:
        ...



class TimeSeriesProfile(StaticProfile):
    """Describes a profile of which the period between the values is constant. The series of values is indexed in time order as a sequence taken at successive equally spaced points in time. It starts at the startDateTime and every next value has intervalBetweenValues seconds between them."""
    startDateTime = ...
    timestep = ...
    values = ...
    def __init__(self, *, startDateTime=..., timestep=..., values=..., **kwargs) -> None:
        ...



class ResidentialBuildingTypeRestriction(Restriction):
    """Defines a restriction on the residential type of the building (terraced, free standing, appartment, ...)."""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class BuildingYearRestriction(Restriction):
    """Defines a restriction on the building year range"""
    range = ...
    def __init__(self, *, range=..., **kwargs) -> None:
        ...



class RangedConstraint(Constraint):
    """Allow to specify a certain constraint as a range (with min and max values) """
    range = ...
    def __init__(self, *, range=..., **kwargs) -> None:
        ...



@abstract
class ConnectableAsset(Asset):
    """Abstract class to group sub classes that have exposed ports or ports of its own"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class EnergyAsset(ConnectableAsset):
    """An abstract class that describes a connectable Asset using ports. EnergyAssets main subclasses contain the 5 capability type: Producer, Consumer, Storage, Conversion and Transport """
    port = ...
    controlStrategy = ...
    behaviour = ...
    def __init__(self, *, port=..., controlStrategy=..., behaviour=..., **kwargs) -> None:
        ...



class GeothermalPotential(AbstractGTPotential):
    """Defines the geothermal potential in a specific area. This type focusses on temperature and depth of the well. See GeothermalEnergyPotental for class focussing on Energy"""
    temperature = ...
    depth = ...
    potential = ...
    powerPerDoublet = ...
    def __init__(self, *, temperature=..., depth=..., potential=..., powerPerDoublet=..., **kwargs) -> None:
        ...



class DemandResponseService(EnergyService):
    """Indicates a service supporting demand response in the energy system"""
    def __init__(self, **kwargs) -> None:
        ...



class AggregatorService(EnergyService):
    """Indicates a aggregator service exploiting flexibility in the energy system"""
    def __init__(self, **kwargs) -> None:
        ...



class InfluxDBProfile(DatabaseProfile):
    """Describes a profile based on a measurement and field as part of an InfluxDB timeseries query"""
    measurement = ...
    field = ...
    def __init__(self, *, measurement=..., field=..., **kwargs) -> None:
        ...



@abstract
class ControlStrategy(EnergyService):
    """Defines a control strategy for a specific asset"""
    energyAsset = ...
    def __init__(self, *, energyAsset=..., **kwargs) -> None:
        ...



class EnergyMarket(EnergyService):
    """Defines an EnergyMarket of the energy system. A market is defined by specifying the assets that participate in this market."""
    asset = ...
    carrier = ...
    parameters = ...
    marketPrice = ...
    def __init__(self, *, asset=..., carrier=..., parameters=..., marketPrice=..., **kwargs) -> None:
        ...



class GeothermalEnergyPotential(AbstractGTPotential):
    """Defines the geothermal potential in a specific area. This type focusses on energy and depth of the well. See GeothermalPotental for class focussing on temperature"""
    depth = ...
    value = ...
    def __init__(self, *, depth=..., value=..., **kwargs) -> None:
        ...



class CompoundMatter(Matter):
    """Composition of different Matters, either mixed (mix of gasses or liquids) or layered.

Examples of layered Matters
- a construction of a wall, roof, or floor with isolation
- double or triple glazing consisting of multiple layers
- a heatnetwork pipe or electrical cable consisting of multiple layers"""
    compoundType = ...
    component = ...
    def __init__(self, *, component=..., compoundType=..., **kwargs) -> None:
        ...



class Fuel(Matter):
    """a Fuel like wood, oil, gas, and so on."""
    energyContent = ...
    emission = ...
    energyContentUnit = ...
    emissionUnit = ...
    def __init__(self, *, energyContent=..., emission=..., energyContentUnit=..., emissionUnit=..., **kwargs) -> None:
        ...



class Material(Matter):
    """a Material like copper, aluminum, wood, stone, concrete, water, styrofoam, plaster"""
    thermalConductivity = ...
    electricalConductivity = ...
    youngsModulus = ...
    specificHeatCapacity = ...
    def __init__(self, *, thermalConductivity=..., electricalConductivity=..., youngsModulus=..., specificHeatCapacity=..., **kwargs) -> None:
        ...



@abstract
class ExposedPortsAsset(ConnectableAsset):
    """Abstract class with a reference to exposed ports. It's the super class of CompoundAsset and all Buildings"""
    port = ...
    def __init__(self, *, port=..., **kwargs) -> None:
        ...



@abstract
class Producer(EnergyAsset):
    """An abstract class that describes EnergyAssets that can produce energy. It is one of the 5 capabilities in ESDL"""
    prodType = ...
    operationalHours = ...
    fullLoadHours = ...
    power = ...
    def __init__(self, *, prodType=..., operationalHours=..., fullLoadHours=..., power=..., **kwargs) -> None:
        ...



@abstract
class Consumer(EnergyAsset):
    """An abstract class that describes EnergyAssets that can consume energy. It is one of the 5 capabilities in ESDL"""
    consType = ...
    power = ...
    operationalHours = ...
    fullLoadHours = ...
    def __init__(self, *, consType=..., power=..., operationalHours=..., fullLoadHours=..., **kwargs) -> None:
        ...



@abstract
class Storage(EnergyAsset):
    """An abstract class that describes EnergyAssets that can store energy. It is one of the 5 capabilities in ESDL"""
    capacity = ...
    chargeEfficiency = ...
    dischargeEfficiency = ...
    selfDischargeRate = ...
    fillLevel = ...
    maxChargeRate = ...
    maxDischargeRate = ...
    profile = ...
    def __init__(self, *, capacity=..., chargeEfficiency=..., profile=..., dischargeEfficiency=..., selfDischargeRate=..., fillLevel=..., maxChargeRate=..., maxDischargeRate=..., **kwargs) -> None:
        ...



@abstract
class Conversion(EnergyAsset):
    """An abstract class that describes EnergyAssets that can convert one energy carrier into another. It is one of the 5 capabilities in ESDL"""
    operationalHours = ...
    fullLoadHours = ...
    residualHeatSourcePotential = ...
    def __init__(self, *, operationalHours=..., fullLoadHours=..., residualHeatSourcePotential=..., **kwargs) -> None:
        ...



@abstract
class Transport(EnergyAsset):
    """An abstract class that describes EnergyAssets that can transport energy. It is one of the 5 capabilities in ESDL"""
    capacity = ...
    efficiency = ...
    operationalHours = ...
    fullLoadHours = ...
    def __init__(self, *, capacity=..., efficiency=..., operationalHours=..., fullLoadHours=..., **kwargs) -> None:
        ...



@abstract
class AbstractBuilding(ExposedPortsAsset):
    """Describes the shared properties of building, building unit and aggregated building"""
    asset = ...
    buildingUsage = ...
    potential = ...
    measures = ...
    def __init__(self, *, asset=..., buildingUsage=..., potential=..., measures=..., **kwargs) -> None:
        ...



class DrivenByDemand(ControlStrategy):
    """Control strategy specifying that an asset is driven by the demand of one of the output ports"""
    outPort = ...
    def __init__(self, *, outPort=..., **kwargs) -> None:
        ...



class DrivenBySupply(ControlStrategy):
    """Control strategy specifying that an asset is driven by the supply of one of the input ports (used in ESDL-based simulation tools)"""
    inPort = ...
    def __init__(self, *, inPort=..., **kwargs) -> None:
        ...



class DrivenByProfile(ControlStrategy):
    """Control strategy specifying that an asset is driven by a profile specified in one of the ports (used in ESDL-based simulation tools)"""
    profile = ...
    port = ...
    def __init__(self, *, profile=..., port=..., **kwargs) -> None:
        ...



class StorageStrategy(ControlStrategy):
    """Control strategy specifying that a storage asset is driven by two profiles specifying the marginal cost to define its charging and discharging behavior (used in ESDL-based simulation tools)"""
    marginalChargeCosts = ...
    marginalDischargeCosts = ...
    def __init__(self, *, marginalChargeCosts=..., marginalDischargeCosts=..., **kwargs) -> None:
        ...



class CurtailmentStrategy(ControlStrategy):
    """Control strategy that specifies a max power at which the production is curtailed"""
    maxPower = ...
    def __init__(self, *, maxPower=..., **kwargs) -> None:
        ...



class PIDController(ControlStrategy):
    """Control strategy specifying that an asset is driven by a PID controller (used in ESDL-based simulation tools)"""
    Kp = ...
    Ki = ...
    Kd = ...
    sensor = ...
    setPoint = ...
    def __init__(self, *, Kp=..., Ki=..., Kd=..., sensor=..., setPoint=..., **kwargs) -> None:
        ...



class CompoundAsset(ExposedPortsAsset):
    """Asset that can contain multiple other assets that belong together. Can for example be used for modelling a certain storage technology, that consists of individual processes for charging and discharging, next to the storage capability itself"""
    asset = ...
    def __init__(self, *, asset=..., **kwargs) -> None:
        ...



class Battery(Storage):
    """A battery can store electrical energy. This is a Storage capability"""
    maxChargeDischargeCycles = ...
    powerFactor = ...
    def __init__(self, *, maxChargeDischargeCycles=..., powerFactor=..., **kwargs) -> None:
        ...



class AggregatedConsumer(Consumer):
    """Represents an aggregation of multiple consumers as one aggregated consumer. It allows you to reference the consumers it is aggregated of by using the aggregationOf reference. Can be used to aggregate a heterogeneous collection of consumers (e.g. of different types)"""
    aggregationOf = ...
    def __init__(self, *, aggregationOf=..., **kwargs) -> None:
        ...



class AggregatedProducer(Producer):
    """Represents an aggregation of multiple producers as one aggregated producer. It allows you to reference the producers it is aggregated of by using the aggregationOf reference. Can be used to aggregate a heterogeneous collection of producers (e.g. of different types)"""
    aggregationOf = ...
    def __init__(self, *, aggregationOf=..., **kwargs) -> None:
        ...



class GenericConsumer(Consumer):
    """Generic consumer class that can be used in cases that the actual asset type is not important or not supported yet in ESDL"""
    def __init__(self, **kwargs) -> None:
        ...



class GenericProducer(Producer):
    """Generic producer class that can be used in cases that the actual asset type is not important or not supported yet in ESDL"""
    def __init__(self, **kwargs) -> None:
        ...



class GenericStorage(Storage):
    """Generic storage class that can be used in cases that the actual asset type is not important or not supported yet in ESDL"""
    def __init__(self, **kwargs) -> None:
        ...



class GenericTransport(Transport):
    """Generic transport class that can be used in cases that the actual asset type is not important or not supported yet in ESDL"""
    def __init__(self, **kwargs) -> None:
        ...



class AggregatedTransport(Transport):
    """Represents an aggregation of multiple transport assets as one aggregated transport asset. It allows you to reference the transport asset it is aggregated of by using the aggregationOf reference. Can be used to aggregate a heterogeneous collection of transport assets (e.g. of different types)"""
    aggregationOf = ...
    def __init__(self, *, aggregationOf=..., **kwargs) -> None:
        ...



class AggregatedStorage(Storage):
    """Represents an aggregation of multiple storage assets as one aggregated storage asset. It allows you to reference the storage asset it is aggregated of by using the aggregationOf reference. Can be used to aggregate a heterogeneous collection of storage assets (e.g. of different types)"""
    aggregationOf = ...
    def __init__(self, *, aggregationOf=..., **kwargs) -> None:
        ...



@abstract
class GenericBuilding(AbstractBuilding):
    """Represents a physical building"""
    buildingYear = ...
    type = ...
    floorArea = ...
    numberOfFloors = ...
    energyLabel = ...
    energyIndex = ...
    address = ...
    buildinginformation = ...
    def __init__(self, *, buildingYear=..., type=..., floorArea=..., numberOfFloors=..., address=..., buildinginformation=..., energyLabel=..., energyIndex=..., **kwargs) -> None:
        ...



class HeatStorage(Storage):
    """Generic heat storage asset with min and max temperatures"""
    minStorageTemperature = ...
    maxStorageTemperature = ...
    volume = ...
    def __init__(self, *, minStorageTemperature=..., maxStorageTemperature=..., volume=..., **kwargs) -> None:
        ...



class Import(Producer):
    """Represents a source that delivers imported energy into the current energy system. Used to model the rest of the energy system that is out of the current scope"""
    def __init__(self, **kwargs) -> None:
        ...



class Export(Consumer):
    """Represents a consumer that consumes exported energy from the current energy system. Used to model the rest of the energy system that is out of the current scope"""
    def __init__(self, **kwargs) -> None:
        ...



class HeatingDemand(Consumer):
    """Describes the heating demand of e.g. a household, area, etc."""
    type = ...
    deviceType = ...
    minTemperature = ...
    maxTemperature = ...
    def __init__(self, *, type=..., deviceType=..., minTemperature=..., maxTemperature=..., **kwargs) -> None:
        ...



class ElectricityDemand(Consumer):
    """Describes the electricity demand of e.g. a household, area, etc."""
    powerFactor = ...
    def __init__(self, *, powerFactor=..., **kwargs) -> None:
        ...



class GasDemand(Consumer):
    """Describes the gas demand of e.g. a household, area, etc. This can be used for all types of gasses (e.g. CO2, Natural Gas, Hydrogen, etc.)"""
    def __init__(self, **kwargs) -> None:
        ...



class EVChargingStation(Consumer):
    """Represents a charging station for electrical vehicles. Both single private-owned car chargers and public charging spaces can be modelled by this class"""
    powerFactor = ...
    def __init__(self, *, powerFactor=..., **kwargs) -> None:
        ...



class AggregatedBuilding(AbstractBuilding):
    """Represents more than one building aggregated into one entity. It supports different types of aggregation, such as building type, energy label etc."""
    numberOfBuildings = ...
    floorArea = ...
    aggregationOf = ...
    energyLabelDistribution = ...
    buildingYearDistribution = ...
    buildingTypeDistribution = ...
    residentialBuildingTypeDistribution = ...
    ownershipRentalTypeDistribution = ...
    def __init__(self, *, aggregationOf=..., numberOfBuildings=..., energyLabelDistribution=..., buildingYearDistribution=..., buildingTypeDistribution=..., residentialBuildingTypeDistribution=..., ownershipRentalTypeDistribution=..., floorArea=..., **kwargs) -> None:
        ...



class Losses(Consumer):
    """Used to define losses explicitly (as a Consumer capability)"""
    def __init__(self, **kwargs) -> None:
        ...



class CCS(Storage):
    """Represents Carbon Capture and Storage"""
    def __init__(self, **kwargs) -> None:
        ...



class CoolingDemand(Consumer):
    """Describes the cooling demand of e.g. a building"""
    deviceType = ...
    def __init__(self, *, deviceType=..., **kwargs) -> None:
        ...



class EnergyDemand(Consumer):
    """Allows to describe the total energy demand when differentiation between energy carriers is not possible or required, otherwise e.g. ElectricityDemand or HeatingDemand is an alternative"""
    def __init__(self, **kwargs) -> None:
        ...



class MobilityDemand(Consumer):
    """Energy demand of the mobility sector. Allows to specify the vehicle types, fuel types and their efficiency and distance travelled"""
    type = ...
    fuelType = ...
    distance = ...
    efficiency = ...
    def __init__(self, *, type=..., fuelType=..., distance=..., efficiency=..., **kwargs) -> None:
        ...



class GasStorage(Storage):
    """Defines a gas storage asset, see also CCS"""
    minStoragePressure = ...
    maxStoragePressure = ...
    volume = ...
    workingVolume = ...
    def __init__(self, *, minStoragePressure=..., maxStoragePressure=..., volume=..., workingVolume=..., **kwargs) -> None:
        ...



class EnergyNetwork(Transport):
    """Defines an energy network. Used for national energy balances, when the specific energy carrier is not required"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class AbstractConductor(Transport):
    """Abstract class to describe conductors such as cables and pipes and joining them using a joint"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class AbstractSwitch(Transport):
    """Abstract class to describe switches such as valve and a circuit breaker"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class AbstractTransformer(Transport):
    """Abstract class to describe transformers, such as Heat exchangers, transformers and pumps"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class AbstractConnection(Transport):
    """Abstract class to describe connections of a building to a grid. E.g. a heat connection, gas connection and electricity connection"""
    def __init__(self, **kwargs) -> None:
        ...



class PVTInstallation(Producer):
    """Defines an installation that combines PV and thermal energy collection"""
    type = ...
    powerFactor = ...
    def __init__(self, *, type=..., powerFactor=..., **kwargs) -> None:
        ...



@abstract
class AbstractSensor(Transport):
    def __init__(self, **kwargs) -> None:
        ...



class SinkConsumer(Consumer):
    """(Deprecated, will be removed in future ESDL versions) Represents a consumer that consumes exported energy from the current energy system. Used to model the rest of the energy system that is out of the current scope"""
    def __init__(self, **kwargs) -> None:
        ...



class SourceProducer(Producer):
    """(Deprecated, will be removed in future ESDL versions) Represents a source that delivers imported energy into the current energy system. Used to model the rest of the energy system that is out of the current scope"""
    def __init__(self, **kwargs) -> None:
        ...



class AirVessel(Transport):
    def __init__(self, **kwargs) -> None:
        ...



class ElectricityProducer(Producer):
    """Describes a (generic) electricity producing asset"""
    minPower = ...
    powerFactor = ...
    def __init__(self, *, minPower=..., powerFactor=..., **kwargs) -> None:
        ...



class HeatProducer(Producer):
    """Describes a (generic) heat producing asset"""
    minTemperature = ...
    maxTemperature = ...
    def __init__(self, *, minTemperature=..., maxTemperature=..., **kwargs) -> None:
        ...



class GasProducer(Producer):
    """Describes a (generic) gas producing asset"""
    def __init__(self, **kwargs) -> None:
        ...



class HybridHeatPump(Conversion):
    """Hybrid heatpump with both an electric heatpump and a gasheater part"""
    gasHeaterThermalPower = ...
    gasHeaterEfficiency = ...
    heatPumpThermalPower = ...
    heatPumpCOP = ...
    heatPumpCoolingPower = ...
    heatPumpCoolingCOP = ...
    powerFactor = ...
    def __init__(self, *, gasHeaterThermalPower=..., gasHeaterEfficiency=..., heatPumpThermalPower=..., heatPumpCOP=..., heatPumpCoolingPower=..., heatPumpCoolingCOP=..., powerFactor=..., **kwargs) -> None:
        ...



@abstract
class AbstractBasicConversion(Conversion):
    """Abstract class for all simple conversion assets that have a power and an efficiency attribute"""
    power = ...
    efficiency = ...
    def __init__(self, *, power=..., efficiency=..., **kwargs) -> None:
        ...



class PumpedHydroPower(Storage):
    def __init__(self, **kwargs) -> None:
        ...



class CAES(Storage):
    """Compressed Air Energy Storage"""
    def __init__(self, **kwargs) -> None:
        ...



class WindTurbine(ElectricityProducer):
    """Describes an individual wind turbine. A wind turbine is a producer capability"""
    rotorDiameter = ...
    height = ...
    type = ...
    powerCurveTable = ...
    def __init__(self, *, rotorDiameter=..., height=..., type=..., powerCurveTable=..., **kwargs) -> None:
        ...



class PVPanel(ElectricityProducer):
    """Describes an individual PV panel. See PVInstallation for multiple PV panels. This is a Producer capability"""
    panelEfficiency = ...
    inverterEfficiency = ...
    angle = ...
    orientation = ...
    def __init__(self, *, panelEfficiency=..., inverterEfficiency=..., angle=..., orientation=..., **kwargs) -> None:
        ...



class ElectricityNetwork(EnergyNetwork):
    """Describes an complete Electricty network, without detailing the complete topology. It is a Transport capability"""
    voltage = ...
    def __init__(self, *, voltage=..., **kwargs) -> None:
        ...



class ElectricityCable(AbstractConductor):
    """Describes a representation of an electricity cable. When defining the geometry of a cable by means of a line, the first point of the line refers to the first port and the last point of the line refers to the second port."""
    length = ...
    related = ...
    def __init__(self, *, length=..., related=..., **kwargs) -> None:
        ...



class BuildingUnit(GenericBuilding):
    """Describes a physical part of a building. In dutch 'verblijfsobject' in the BAG national building and address registry. This can be used e.g. to model appartments in appartment complexes"""
    def __init__(self, **kwargs) -> None:
        ...



class GenericConversion(AbstractBasicConversion):
    """Generic conversion class that can be used in cases that the actual asset type is not important or not supported yet in ESDL"""
    def __init__(self, **kwargs) -> None:
        ...



class AggregatedConversion(AbstractBasicConversion):
    """Represents an aggregation of multiple conversion assets as one aggregated conversion asset. It allows you to reference the conversion asset it is aggregated of by using the aggregationOf reference. Can be used to aggregate a heterogeneous collection of conversion assets (e.g. of different types)"""
    aggregationOf = ...
    def __init__(self, *, aggregationOf=..., **kwargs) -> None:
        ...



class GasHeater(AbstractBasicConversion):
    """Converts gas to heat, e.g. a gas boiler or gas heater"""
    minimumBurnRate = ...
    type = ...
    def __init__(self, *, minimumBurnRate=..., type=..., **kwargs) -> None:
        ...



class HeatNetwork(EnergyNetwork):
    """Describes an complete heat network, without detailing the complete topology. It is a Transport capability"""
    temperature = ...
    temperatureMin = ...
    temperatureMax = ...
    def __init__(self, *, temperature=..., temperatureMin=..., temperatureMax=..., **kwargs) -> None:
        ...



class GasNetwork(EnergyNetwork):
    """Describes an complete gas network, without detailing the complete topology. It is a Transport capability"""
    pressure = ...
    def __init__(self, *, pressure=..., **kwargs) -> None:
        ...



class Pipe(AbstractConductor):
    """Represents a pipe to transport gasses or fluids. When defining the geometry of a pipe by means of a line, the first point of the line refers to the first port and the last point of the line refers to the second port."""
    innerDiameter = ...
    outerDiameter = ...
    length = ...
    roughness = ...
    diameter = ...
    related = ...
    def __init__(self, *, innerDiameter=..., outerDiameter=..., length=..., roughness=..., diameter=..., related=..., **kwargs) -> None:
        ...



class GeothermalSource(HeatProducer):
    """Geothermal source including the installation that connects the source to the network"""
    wellDepth = ...
    geothermalSourceType = ...
    COP = ...
    aquiferTemperature = ...
    flowRate = ...
    pumpPower = ...
    powerFactor = ...
    geothermalPotential = ...
    def __init__(self, *, wellDepth=..., geothermalSourceType=..., COP=..., aquiferTemperature=..., flowRate=..., pumpPower=..., geothermalPotential=..., powerFactor=..., **kwargs) -> None:
        ...



@abstract
class CoGeneration(AbstractBasicConversion):
    """Abstract asset describing a co-generation plant that produces heat and electricity"""
    heatEfficiency = ...
    electricalEfficiency = ...
    HERatio = ...
    fuelType = ...
    leadCommodity = ...
    powerFactor = ...
    energyCarrier = ...
    def __init__(self, *, heatEfficiency=..., electricalEfficiency=..., energyCarrier=..., HERatio=..., fuelType=..., leadCommodity=..., powerFactor=..., **kwargs) -> None:
        ...



class HeatPump(AbstractBasicConversion):
    """Describes a Heat Pump"""
    source = ...
    stages = ...
    COP = ...
    additionalHeatingSourceType = ...
    powerFactor = ...
    def __init__(self, *, source=..., stages=..., COP=..., additionalHeatingSourceType=..., powerFactor=..., **kwargs) -> None:
        ...



class Transformer(AbstractTransformer):
    """Electrical transformer between different voltage levels"""
    voltagePrimary = ...
    voltageSecundary = ...
    def __init__(self, *, voltagePrimary=..., voltageSecundary=..., **kwargs) -> None:
        ...



class HeatExchange(AbstractTransformer):
    """Exchange heat between two circuits"""
    heatTransferCoefficient = ...
    lengthPrimarySide = ...
    diameterPrimarySide = ...
    roughnessPrimarySide = ...
    lengthSecundarySide = ...
    diameterSecundarySide = ...
    roughnessSecundarySide = ...
    def __init__(self, *, heatTransferCoefficient=..., lengthPrimarySide=..., diameterPrimarySide=..., roughnessPrimarySide=..., lengthSecundarySide=..., diameterSecundarySide=..., roughnessSecundarySide=..., **kwargs) -> None:
        ...



class EConnection(AbstractConnection):
    """Electricity connection of a building. Defines the demarcation between the inhouse network and the electricity grid (location where the (smart) meter is located)"""
    EANCode = ...
    def __init__(self, *, EANCode=..., **kwargs) -> None:
        ...



class HConnection(AbstractConnection):
    """Heat connection of a building. Defines the demarcation between the inhouse network and the heat grid (location where the (smart) meter is located)"""
    def __init__(self, **kwargs) -> None:
        ...



class GConnection(AbstractConnection):
    """Gas connection of a building. Defines the demarcation between the inhouse network and the gas grid (location where the (smart) meter is located)"""
    def __init__(self, **kwargs) -> None:
        ...



class PowerPlant(AbstractBasicConversion):
    """Defines an electricity generating plant"""
    fuel = ...
    maxLoad = ...
    minLoad = ...
    effMaxLoad = ...
    effMinLoad = ...
    powerFactor = ...
    type = ...
    energyCarrier = ...
    mustRun = ...
    def __init__(self, *, fuel=..., maxLoad=..., minLoad=..., effMaxLoad=..., effMinLoad=..., energyCarrier=..., mustRun=..., powerFactor=..., type=..., **kwargs) -> None:
        ...



class PowerToX(AbstractBasicConversion):
    """Represents the ability to convert electricity to some other form of energy"""
    def __init__(self, **kwargs) -> None:
        ...



class XToPower(AbstractBasicConversion):
    """Represents the ability to convert some other form of energy to electricity"""
    def __init__(self, **kwargs) -> None:
        ...



class Pump(AbstractTransformer):
    """Defines a pump, e.g. in a water or heat network"""
    pumpCapacity = ...
    pumpEfficiency = ...
    polarMomentOfInertia = ...
    ratedSpeed = ...
    powerFactor = ...
    pumpCurveTable = ...
    def __init__(self, *, pumpCapacity=..., pumpEfficiency=..., polarMomentOfInertia=..., ratedSpeed=..., pumpCurveTable=..., powerFactor=..., **kwargs) -> None:
        ...



class Airco(AbstractBasicConversion):
    """Represents an air conditioning unit"""
    powerFactor = ...
    def __init__(self, *, powerFactor=..., **kwargs) -> None:
        ...



class SolarCollector(HeatProducer):
    """Defines a SolarCollector asset"""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class ResidualHeatSource(HeatProducer):
    """Defines a source of residual heat, e.g. a data center or factory"""
    type = ...
    residualHeatSourcePotential = ...
    def __init__(self, *, type=..., residualHeatSourcePotential=..., **kwargs) -> None:
        ...



class FermentationPlant(AbstractBasicConversion):
    """Defines a plant fuelled by biomass"""
    def __init__(self, **kwargs) -> None:
        ...



class GasConversion(AbstractBasicConversion):
    """Defines an asset that can convert gas into another form of gas. E.g. SMR or ATR."""
    type = ...
    outputPressure = ...
    def __init__(self, *, type=..., outputPressure=..., **kwargs) -> None:
        ...



class WaterToPower(ElectricityProducer):
    """Defines an asset that uses water to produce electricity. E.g.  hydro power, tidal power, wave power or osmotic power"""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class RoomHeater(AbstractBasicConversion):
    """Defines an asset for heating rooms, such as infra red panels, gas stove, etc."""
    type = ...
    def __init__(self, *, type=..., **kwargs) -> None:
        ...



class BiomassHeater(AbstractBasicConversion):
    """Converts biomass into heat and/or electricity"""
    def __init__(self, **kwargs) -> None:
        ...



class UTES(HeatStorage):
    """Underground Thermal Energy Storage"""
    type = ...
    UTESPotential = ...
    def __init__(self, *, type=..., UTESPotential=..., **kwargs) -> None:
        ...



class WaterBuffer(HeatStorage):
    """Storage by means of storing energy in water, e.g. a tank."""
    def __init__(self, **kwargs) -> None:
        ...



class Joint(AbstractConductor):
    """A Joint is a means to connect AbstractConductors, such as Pipes and ElectricalCables. This helps when these conductors have opposite Ports."""
    related = ...
    def __init__(self, *, related=..., **kwargs) -> None:
        ...



class Bus(AbstractConductor):
    voltage = ...
    related = ...
    def __init__(self, *, voltage=..., related=..., **kwargs) -> None:
        ...



class Sensor(AbstractSensor):
    quantityAndUnit = ...
    def __init__(self, *, quantityAndUnit=..., **kwargs) -> None:
        ...



class Compressor(AbstractTransformer):
    powerFactor = ...
    def __init__(self, *, powerFactor=..., **kwargs) -> None:
        ...



class PressureReducingValve(AbstractTransformer):
    valveCoefficient = ...
    def __init__(self, *, valveCoefficient=..., **kwargs) -> None:
        ...



class Building(GenericBuilding):
    """Represents a physical building"""
    def __init__(self, **kwargs) -> None:
        ...



@abstract
class AbstractActiveSwitch(AbstractSwitch):
    position = ...
    def __init__(self, *, position=..., **kwargs) -> None:
        ...



@abstract
class AbstractPassiveSwitch(AbstractSwitch):
    def __init__(self, **kwargs) -> None:
        ...



class ATES(HeatStorage):
    """Aquifer Thermal Energy Storage"""
    aquiferTopDepth = ...
    aquiferThickness = ...
    aquiferMidTemperature = ...
    aquiferNetToGross = ...
    aquiferPorosity = ...
    aquiferPermeability = ...
    aquiferAnisotropy = ...
    salinity = ...
    wellCasingSize = ...
    wellDistance = ...
    def __init__(self, *, aquiferTopDepth=..., aquiferThickness=..., aquiferMidTemperature=..., aquiferNetToGross=..., aquiferPorosity=..., aquiferPermeability=..., aquiferAnisotropy=..., salinity=..., wellCasingSize=..., wellDistance=..., **kwargs) -> None:
        ...



class ElectricBoiler(AbstractBasicConversion):
    def __init__(self, **kwargs) -> None:
        ...



class FuelCell(CoGeneration):
    """Defines a Fuel Cell"""
    def __init__(self, **kwargs) -> None:
        ...



class Valve(AbstractActiveSwitch):
    """Defines a valve, e.g. in a water, gas or heat network"""
    type = ...
    innerDiameter = ...
    flowCoefficient = ...
    def __init__(self, *, type=..., innerDiameter=..., flowCoefficient=..., **kwargs) -> None:
        ...



class CHP(CoGeneration):
    """Describes a Combined Heat and Power installation"""
    CHPType = ...
    def __init__(self, *, CHPType=..., **kwargs) -> None:
        ...



class Electrolyzer(PowerToX):
    """Defines an electrolyzer that converts electricity into hydrogen"""
    outputPressure = ...
    maxLoad = ...
    minLoad = ...
    effMaxLoad = ...
    effMinLoad = ...
    powerFactor = ...
    def __init__(self, *, outputPressure=..., maxLoad=..., minLoad=..., effMaxLoad=..., effMinLoad=..., powerFactor=..., **kwargs) -> None:
        ...



class PVInstallation(PVPanel):
    """Defines a Photo Voltaic Installation, e.g. roof top PV, a PV field or parc."""
    type = ...
    numberOfPanels = ...
    def __init__(self, *, type=..., numberOfPanels=..., **kwargs) -> None:
        ...



class CircuitBreaker(AbstractPassiveSwitch):
    """Defines a circuit breaker in electric transmission or distribution grids"""
    def __init__(self, **kwargs) -> None:
        ...



class Switch(AbstractActiveSwitch):
    def __init__(self, **kwargs) -> None:
        ...



class PVPark(PVPanel):
    """Defines a PV park of multiple panels"""
    numberOfPanels = ...
    def __init__(self, *, numberOfPanels=..., **kwargs) -> None:
        ...



class WindPark(WindTurbine):
    """Defines a wind park of multiple turbines"""
    numberOfTurbines = ...
    turbinePower = ...
    def __init__(self, *, numberOfTurbines=..., turbinePower=..., **kwargs) -> None:
        ...



class CheckValve(AbstractPassiveSwitch):
    innerDiameter = ...
    reopenDeltaP = ...
    flowCoefficient = ...
    def __init__(self, *, innerDiameter=..., reopenDeltaP=..., flowCoefficient=..., **kwargs) -> None:
        ...
